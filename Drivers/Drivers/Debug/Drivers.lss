
Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000950  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000950  000009e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  0080006a  0080006a  000009ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  00000a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001da2  00000000  00000000  00000c14  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bca  00000000  00000000  000029b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f9f  00000000  00000000  00003580  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000480  00000000  00000000  00004520  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007b9  00000000  00000000  000049a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000119c  00000000  00000000  00005159  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  000062f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__vector_1>
   8:	0c 94 a1 03 	jmp	0x742	; 0x742 <__vector_2>
   c:	0c 94 c8 03 	jmp	0x790	; 0x790 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 3f 04 	jmp	0x87e	; 0x87e <__vector_10>
  2c:	0c 94 18 04 	jmp	0x830	; 0x830 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e5       	ldi	r30, 0x50	; 80
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 37       	cpi	r26, 0x79	; 121
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 7d 00 	call	0xfa	; 0xfa <main>
  8a:	0c 94 a6 04 	jmp	0x94c	; 0x94c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <toggle>:

void toggle(void)
{
	static uint16 no_of_ovfs = 0;
	
	no_of_ovfs++;
  92:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
  96:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <__data_end+0x1>
  9a:	01 96       	adiw	r24, 0x01	; 1
  9c:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <__data_end+0x1>
  a0:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
	if(no_of_ovfs == 1000)
  a4:	88 3e       	cpi	r24, 0xE8	; 232
  a6:	93 40       	sbci	r25, 0x03	; 3
  a8:	39 f5       	brne	.+78     	; 0xf8 <toggle+0x66>
	{
		sec++;
  aa:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <sec>
  ae:	8f 5f       	subi	r24, 0xFF	; 255
  b0:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <sec>
		if(sec == 60)
  b4:	8c 33       	cpi	r24, 0x3C	; 60
  b6:	39 f4       	brne	.+14     	; 0xc6 <toggle+0x34>
		{
			sec = 0;
  b8:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <sec>
			min++;
  bc:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <min>
  c0:	8f 5f       	subi	r24, 0xFF	; 255
  c2:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <min>
		}
		if(min == 60)
  c6:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <min>
  ca:	8c 33       	cpi	r24, 0x3C	; 60
  cc:	39 f4       	brne	.+14     	; 0xdc <toggle+0x4a>
		{
			min = 0;
  ce:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <min>
			hour++;
  d2:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <hour>
  d6:	8f 5f       	subi	r24, 0xFF	; 255
  d8:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <hour>
		}
		if(hour == 24)
  dc:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <hour>
  e0:	88 31       	cpi	r24, 0x18	; 24
  e2:	31 f4       	brne	.+12     	; 0xf0 <toggle+0x5e>
		{
			sec = 0;
  e4:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <sec>
			min = 0;
  e8:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <min>
			hour = 0;
  ec:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <hour>
		}
		no_of_ovfs = 0;
  f0:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <__data_end+0x1>
  f4:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__data_end>
  f8:	08 95       	ret

000000fa <main>:
	}
}
int main(void)
{
	LED_init(RED_LED_PORT,RED_LED_PIN);
  fa:	67 e0       	ldi	r22, 0x07	; 7
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	0e 94 9c 02 	call	0x538	; 0x538 <LED_init>
	TIMER0_callback(CTC_MODE,toggle);
 102:	69 e4       	ldi	r22, 0x49	; 73
 104:	70 e0       	ldi	r23, 0x00	; 0
 106:	82 e0       	ldi	r24, 0x02	; 2
 108:	0e 94 09 04 	call	0x812	; 0x812 <TIMER0_callback>
	TIMER0_init();
 10c:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <TIMER0_init>
	GIE_enable();
 110:	0e 94 ef 03 	call	0x7de	; 0x7de <GIE_enable>
	LCD_init();
 114:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LCD_init>
	LCD_displayString("00:00:00");
 118:	80 e6       	ldi	r24, 0x60	; 96
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <LCD_displayString>

    while (1) 
    {	
		if(sec<10)
 120:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <sec>
 124:	8a 30       	cpi	r24, 0x0A	; 10
 126:	50 f4       	brcc	.+20     	; 0x13c <main+0x42>
		{
			LCD_moveCursor(0,7);
 128:	67 e0       	ldi	r22, 0x07	; 7
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	0e 94 67 02 	call	0x4ce	; 0x4ce <LCD_moveCursor>
			LCD_intgerToString(sec);
 130:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <sec>
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	0e 94 7e 02 	call	0x4fc	; 0x4fc <LCD_intgerToString>
 13a:	09 c0       	rjmp	.+18     	; 0x14e <main+0x54>
		}
		else
		{
			LCD_moveCursor(0,6);
 13c:	66 e0       	ldi	r22, 0x06	; 6
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	0e 94 67 02 	call	0x4ce	; 0x4ce <LCD_moveCursor>
			LCD_intgerToString(sec);
 144:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <sec>
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 7e 02 	call	0x4fc	; 0x4fc <LCD_intgerToString>
		}
		if(min<10)
 14e:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <min>
 152:	8a 30       	cpi	r24, 0x0A	; 10
 154:	50 f4       	brcc	.+20     	; 0x16a <main+0x70>
		{
			LCD_moveCursor(0,4);
 156:	64 e0       	ldi	r22, 0x04	; 4
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	0e 94 67 02 	call	0x4ce	; 0x4ce <LCD_moveCursor>
			LCD_intgerToString(min);
 15e:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <min>
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	0e 94 7e 02 	call	0x4fc	; 0x4fc <LCD_intgerToString>
 168:	09 c0       	rjmp	.+18     	; 0x17c <main+0x82>
		}
		else
		{
			LCD_moveCursor(0,3);
 16a:	63 e0       	ldi	r22, 0x03	; 3
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	0e 94 67 02 	call	0x4ce	; 0x4ce <LCD_moveCursor>
			LCD_intgerToString(min);
 172:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <min>
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 7e 02 	call	0x4fc	; 0x4fc <LCD_intgerToString>
		}
		if(hour<10)
 17c:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <hour>
 180:	8a 30       	cpi	r24, 0x0A	; 10
 182:	50 f4       	brcc	.+20     	; 0x198 <main+0x9e>
		{
			LCD_moveCursor(0,1);
 184:	61 e0       	ldi	r22, 0x01	; 1
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	0e 94 67 02 	call	0x4ce	; 0x4ce <LCD_moveCursor>
			LCD_intgerToString(hour);
 18c:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <hour>
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	0e 94 7e 02 	call	0x4fc	; 0x4fc <LCD_intgerToString>
 196:	c4 cf       	rjmp	.-120    	; 0x120 <main+0x26>
		}
		else
		{
			LCD_moveCursor(0,0);
 198:	60 e0       	ldi	r22, 0x00	; 0
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	0e 94 67 02 	call	0x4ce	; 0x4ce <LCD_moveCursor>
			LCD_intgerToString(hour);
 1a0:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <hour>
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	0e 94 7e 02 	call	0x4fc	; 0x4fc <LCD_intgerToString>
 1aa:	ba cf       	rjmp	.-140    	; 0x120 <main+0x26>

000001ac <LCD_sendCommand>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
	LCD_moveCursor(row,col); /* go to to the required LCD position */
	LCD_displayString(Str); /* display the string */
}
 1ac:	cf 93       	push	r28
 1ae:	c8 2f       	mov	r28, r24
 1b0:	40 e0       	ldi	r20, 0x00	; 0
 1b2:	63 e0       	ldi	r22, 0x03	; 3
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	0e 94 0d 03 	call	0x61a	; 0x61a <DIO_voidSetPinValue>
 1ba:	8f e9       	ldi	r24, 0x9F	; 159
 1bc:	9f e0       	ldi	r25, 0x0F	; 15
 1be:	01 97       	sbiw	r24, 0x01	; 1
 1c0:	f1 f7       	brne	.-4      	; 0x1be <LCD_sendCommand+0x12>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <LCD_sendCommand+0x18>
 1c4:	00 00       	nop
 1c6:	41 e0       	ldi	r20, 0x01	; 1
 1c8:	62 e0       	ldi	r22, 0x02	; 2
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	0e 94 0d 03 	call	0x61a	; 0x61a <DIO_voidSetPinValue>
 1d0:	8f e9       	ldi	r24, 0x9F	; 159
 1d2:	9f e0       	ldi	r25, 0x0F	; 15
 1d4:	01 97       	sbiw	r24, 0x01	; 1
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <LCD_sendCommand+0x28>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <LCD_sendCommand+0x2e>
 1da:	00 00       	nop
 1dc:	4c 2f       	mov	r20, r28
 1de:	40 71       	andi	r20, 0x10	; 16
 1e0:	50 e0       	ldi	r21, 0x00	; 0
 1e2:	55 95       	asr	r21
 1e4:	47 95       	ror	r20
 1e6:	55 95       	asr	r21
 1e8:	47 95       	ror	r20
 1ea:	55 95       	asr	r21
 1ec:	47 95       	ror	r20
 1ee:	55 95       	asr	r21
 1f0:	47 95       	ror	r20
 1f2:	60 e0       	ldi	r22, 0x00	; 0
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	0e 94 0d 03 	call	0x61a	; 0x61a <DIO_voidSetPinValue>
 1fa:	4c 2f       	mov	r20, r28
 1fc:	40 72       	andi	r20, 0x20	; 32
 1fe:	50 e0       	ldi	r21, 0x00	; 0
 200:	55 95       	asr	r21
 202:	47 95       	ror	r20
 204:	55 95       	asr	r21
 206:	47 95       	ror	r20
 208:	55 95       	asr	r21
 20a:	47 95       	ror	r20
 20c:	55 95       	asr	r21
 20e:	47 95       	ror	r20
 210:	55 95       	asr	r21
 212:	47 95       	ror	r20
 214:	61 e0       	ldi	r22, 0x01	; 1
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	0e 94 0d 03 	call	0x61a	; 0x61a <DIO_voidSetPinValue>
 21c:	4c 2f       	mov	r20, r28
 21e:	40 74       	andi	r20, 0x40	; 64
 220:	50 e0       	ldi	r21, 0x00	; 0
 222:	04 2e       	mov	r0, r20
 224:	45 2f       	mov	r20, r21
 226:	00 0c       	add	r0, r0
 228:	44 1f       	adc	r20, r20
 22a:	55 0b       	sbc	r21, r21
 22c:	00 0c       	add	r0, r0
 22e:	44 1f       	adc	r20, r20
 230:	55 1f       	adc	r21, r21
 232:	62 e0       	ldi	r22, 0x02	; 2
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	0e 94 0d 03 	call	0x61a	; 0x61a <DIO_voidSetPinValue>
 23a:	4c 2f       	mov	r20, r28
 23c:	44 1f       	adc	r20, r20
 23e:	44 27       	eor	r20, r20
 240:	44 1f       	adc	r20, r20
 242:	64 e0       	ldi	r22, 0x04	; 4
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	0e 94 0d 03 	call	0x61a	; 0x61a <DIO_voidSetPinValue>
 24a:	8f e9       	ldi	r24, 0x9F	; 159
 24c:	9f e0       	ldi	r25, 0x0F	; 15
 24e:	01 97       	sbiw	r24, 0x01	; 1
 250:	f1 f7       	brne	.-4      	; 0x24e <LCD_sendCommand+0xa2>
 252:	00 c0       	rjmp	.+0      	; 0x254 <LCD_sendCommand+0xa8>
 254:	00 00       	nop
 256:	40 e0       	ldi	r20, 0x00	; 0
 258:	62 e0       	ldi	r22, 0x02	; 2
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	0e 94 0d 03 	call	0x61a	; 0x61a <DIO_voidSetPinValue>
 260:	8f e9       	ldi	r24, 0x9F	; 159
 262:	9f e0       	ldi	r25, 0x0F	; 15
 264:	01 97       	sbiw	r24, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <LCD_sendCommand+0xb8>
 268:	00 c0       	rjmp	.+0      	; 0x26a <LCD_sendCommand+0xbe>
 26a:	00 00       	nop
 26c:	41 e0       	ldi	r20, 0x01	; 1
 26e:	62 e0       	ldi	r22, 0x02	; 2
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	0e 94 0d 03 	call	0x61a	; 0x61a <DIO_voidSetPinValue>
 276:	8f e9       	ldi	r24, 0x9F	; 159
 278:	9f e0       	ldi	r25, 0x0F	; 15
 27a:	01 97       	sbiw	r24, 0x01	; 1
 27c:	f1 f7       	brne	.-4      	; 0x27a <LCD_sendCommand+0xce>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <LCD_sendCommand+0xd4>
 280:	00 00       	nop
 282:	4c 2f       	mov	r20, r28
 284:	41 70       	andi	r20, 0x01	; 1
 286:	60 e0       	ldi	r22, 0x00	; 0
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	0e 94 0d 03 	call	0x61a	; 0x61a <DIO_voidSetPinValue>
 28e:	4c 2f       	mov	r20, r28
 290:	42 70       	andi	r20, 0x02	; 2
 292:	50 e0       	ldi	r21, 0x00	; 0
 294:	55 95       	asr	r21
 296:	47 95       	ror	r20
 298:	61 e0       	ldi	r22, 0x01	; 1
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	0e 94 0d 03 	call	0x61a	; 0x61a <DIO_voidSetPinValue>
 2a0:	4c 2f       	mov	r20, r28
 2a2:	44 70       	andi	r20, 0x04	; 4
 2a4:	50 e0       	ldi	r21, 0x00	; 0
 2a6:	55 95       	asr	r21
 2a8:	47 95       	ror	r20
 2aa:	55 95       	asr	r21
 2ac:	47 95       	ror	r20
 2ae:	62 e0       	ldi	r22, 0x02	; 2
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	0e 94 0d 03 	call	0x61a	; 0x61a <DIO_voidSetPinValue>
 2b6:	c8 70       	andi	r28, 0x08	; 8
 2b8:	4c 2f       	mov	r20, r28
 2ba:	50 e0       	ldi	r21, 0x00	; 0
 2bc:	55 95       	asr	r21
 2be:	47 95       	ror	r20
 2c0:	55 95       	asr	r21
 2c2:	47 95       	ror	r20
 2c4:	55 95       	asr	r21
 2c6:	47 95       	ror	r20
 2c8:	64 e0       	ldi	r22, 0x04	; 4
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	0e 94 0d 03 	call	0x61a	; 0x61a <DIO_voidSetPinValue>
 2d0:	8f e9       	ldi	r24, 0x9F	; 159
 2d2:	9f e0       	ldi	r25, 0x0F	; 15
 2d4:	01 97       	sbiw	r24, 0x01	; 1
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <LCD_sendCommand+0x128>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <LCD_sendCommand+0x12e>
 2da:	00 00       	nop
 2dc:	40 e0       	ldi	r20, 0x00	; 0
 2de:	62 e0       	ldi	r22, 0x02	; 2
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	0e 94 0d 03 	call	0x61a	; 0x61a <DIO_voidSetPinValue>
 2e6:	8f e9       	ldi	r24, 0x9F	; 159
 2e8:	9f e0       	ldi	r25, 0x0F	; 15
 2ea:	01 97       	sbiw	r24, 0x01	; 1
 2ec:	f1 f7       	brne	.-4      	; 0x2ea <LCD_sendCommand+0x13e>
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <LCD_sendCommand+0x144>
 2f0:	00 00       	nop
 2f2:	cf 91       	pop	r28
 2f4:	08 95       	ret

000002f6 <LCD_init>:
 2f6:	41 e0       	ldi	r20, 0x01	; 1
 2f8:	63 e0       	ldi	r22, 0x03	; 3
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	0e 94 a0 02 	call	0x540	; 0x540 <DIO_voidSetPinDirection>
 300:	41 e0       	ldi	r20, 0x01	; 1
 302:	62 e0       	ldi	r22, 0x02	; 2
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	0e 94 a0 02 	call	0x540	; 0x540 <DIO_voidSetPinDirection>
 30a:	2f ef       	ldi	r18, 0xFF	; 255
 30c:	89 ef       	ldi	r24, 0xF9	; 249
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	21 50       	subi	r18, 0x01	; 1
 312:	80 40       	sbci	r24, 0x00	; 0
 314:	90 40       	sbci	r25, 0x00	; 0
 316:	e1 f7       	brne	.-8      	; 0x310 <LCD_init+0x1a>
 318:	00 c0       	rjmp	.+0      	; 0x31a <LCD_init+0x24>
 31a:	00 00       	nop
 31c:	41 e0       	ldi	r20, 0x01	; 1
 31e:	60 e0       	ldi	r22, 0x00	; 0
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	0e 94 a0 02 	call	0x540	; 0x540 <DIO_voidSetPinDirection>
 326:	41 e0       	ldi	r20, 0x01	; 1
 328:	61 e0       	ldi	r22, 0x01	; 1
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	0e 94 a0 02 	call	0x540	; 0x540 <DIO_voidSetPinDirection>
 330:	41 e0       	ldi	r20, 0x01	; 1
 332:	62 e0       	ldi	r22, 0x02	; 2
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	0e 94 a0 02 	call	0x540	; 0x540 <DIO_voidSetPinDirection>
 33a:	41 e0       	ldi	r20, 0x01	; 1
 33c:	64 e0       	ldi	r22, 0x04	; 4
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	0e 94 a0 02 	call	0x540	; 0x540 <DIO_voidSetPinDirection>
 344:	83 e3       	ldi	r24, 0x33	; 51
 346:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_sendCommand>
 34a:	82 e3       	ldi	r24, 0x32	; 50
 34c:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_sendCommand>
 350:	88 e2       	ldi	r24, 0x28	; 40
 352:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_sendCommand>
 356:	86 e0       	ldi	r24, 0x06	; 6
 358:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_sendCommand>
 35c:	8c e0       	ldi	r24, 0x0C	; 12
 35e:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_sendCommand>
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_sendCommand>
 368:	08 95       	ret

0000036a <LCD_displayCharacter>:
 36a:	cf 93       	push	r28
 36c:	c8 2f       	mov	r28, r24
 36e:	41 e0       	ldi	r20, 0x01	; 1
 370:	63 e0       	ldi	r22, 0x03	; 3
 372:	80 e0       	ldi	r24, 0x00	; 0
 374:	0e 94 0d 03 	call	0x61a	; 0x61a <DIO_voidSetPinValue>
 378:	8f e9       	ldi	r24, 0x9F	; 159
 37a:	9f e0       	ldi	r25, 0x0F	; 15
 37c:	01 97       	sbiw	r24, 0x01	; 1
 37e:	f1 f7       	brne	.-4      	; 0x37c <LCD_displayCharacter+0x12>
 380:	00 c0       	rjmp	.+0      	; 0x382 <LCD_displayCharacter+0x18>
 382:	00 00       	nop
 384:	41 e0       	ldi	r20, 0x01	; 1
 386:	62 e0       	ldi	r22, 0x02	; 2
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	0e 94 0d 03 	call	0x61a	; 0x61a <DIO_voidSetPinValue>
 38e:	8f e9       	ldi	r24, 0x9F	; 159
 390:	9f e0       	ldi	r25, 0x0F	; 15
 392:	01 97       	sbiw	r24, 0x01	; 1
 394:	f1 f7       	brne	.-4      	; 0x392 <LCD_displayCharacter+0x28>
 396:	00 c0       	rjmp	.+0      	; 0x398 <LCD_displayCharacter+0x2e>
 398:	00 00       	nop
 39a:	4c 2f       	mov	r20, r28
 39c:	40 71       	andi	r20, 0x10	; 16
 39e:	50 e0       	ldi	r21, 0x00	; 0
 3a0:	55 95       	asr	r21
 3a2:	47 95       	ror	r20
 3a4:	55 95       	asr	r21
 3a6:	47 95       	ror	r20
 3a8:	55 95       	asr	r21
 3aa:	47 95       	ror	r20
 3ac:	55 95       	asr	r21
 3ae:	47 95       	ror	r20
 3b0:	60 e0       	ldi	r22, 0x00	; 0
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	0e 94 0d 03 	call	0x61a	; 0x61a <DIO_voidSetPinValue>
 3b8:	4c 2f       	mov	r20, r28
 3ba:	40 72       	andi	r20, 0x20	; 32
 3bc:	50 e0       	ldi	r21, 0x00	; 0
 3be:	55 95       	asr	r21
 3c0:	47 95       	ror	r20
 3c2:	55 95       	asr	r21
 3c4:	47 95       	ror	r20
 3c6:	55 95       	asr	r21
 3c8:	47 95       	ror	r20
 3ca:	55 95       	asr	r21
 3cc:	47 95       	ror	r20
 3ce:	55 95       	asr	r21
 3d0:	47 95       	ror	r20
 3d2:	61 e0       	ldi	r22, 0x01	; 1
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	0e 94 0d 03 	call	0x61a	; 0x61a <DIO_voidSetPinValue>
 3da:	4c 2f       	mov	r20, r28
 3dc:	40 74       	andi	r20, 0x40	; 64
 3de:	50 e0       	ldi	r21, 0x00	; 0
 3e0:	04 2e       	mov	r0, r20
 3e2:	45 2f       	mov	r20, r21
 3e4:	00 0c       	add	r0, r0
 3e6:	44 1f       	adc	r20, r20
 3e8:	55 0b       	sbc	r21, r21
 3ea:	00 0c       	add	r0, r0
 3ec:	44 1f       	adc	r20, r20
 3ee:	55 1f       	adc	r21, r21
 3f0:	62 e0       	ldi	r22, 0x02	; 2
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	0e 94 0d 03 	call	0x61a	; 0x61a <DIO_voidSetPinValue>
 3f8:	4c 2f       	mov	r20, r28
 3fa:	44 1f       	adc	r20, r20
 3fc:	44 27       	eor	r20, r20
 3fe:	44 1f       	adc	r20, r20
 400:	64 e0       	ldi	r22, 0x04	; 4
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	0e 94 0d 03 	call	0x61a	; 0x61a <DIO_voidSetPinValue>
 408:	8f e9       	ldi	r24, 0x9F	; 159
 40a:	9f e0       	ldi	r25, 0x0F	; 15
 40c:	01 97       	sbiw	r24, 0x01	; 1
 40e:	f1 f7       	brne	.-4      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 410:	00 c0       	rjmp	.+0      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 412:	00 00       	nop
 414:	40 e0       	ldi	r20, 0x00	; 0
 416:	62 e0       	ldi	r22, 0x02	; 2
 418:	80 e0       	ldi	r24, 0x00	; 0
 41a:	0e 94 0d 03 	call	0x61a	; 0x61a <DIO_voidSetPinValue>
 41e:	8f e9       	ldi	r24, 0x9F	; 159
 420:	9f e0       	ldi	r25, 0x0F	; 15
 422:	01 97       	sbiw	r24, 0x01	; 1
 424:	f1 f7       	brne	.-4      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 426:	00 c0       	rjmp	.+0      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 428:	00 00       	nop
 42a:	41 e0       	ldi	r20, 0x01	; 1
 42c:	62 e0       	ldi	r22, 0x02	; 2
 42e:	80 e0       	ldi	r24, 0x00	; 0
 430:	0e 94 0d 03 	call	0x61a	; 0x61a <DIO_voidSetPinValue>
 434:	8f e9       	ldi	r24, 0x9F	; 159
 436:	9f e0       	ldi	r25, 0x0F	; 15
 438:	01 97       	sbiw	r24, 0x01	; 1
 43a:	f1 f7       	brne	.-4      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 43c:	00 c0       	rjmp	.+0      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 43e:	00 00       	nop
 440:	4c 2f       	mov	r20, r28
 442:	41 70       	andi	r20, 0x01	; 1
 444:	60 e0       	ldi	r22, 0x00	; 0
 446:	81 e0       	ldi	r24, 0x01	; 1
 448:	0e 94 0d 03 	call	0x61a	; 0x61a <DIO_voidSetPinValue>
 44c:	4c 2f       	mov	r20, r28
 44e:	42 70       	andi	r20, 0x02	; 2
 450:	50 e0       	ldi	r21, 0x00	; 0
 452:	55 95       	asr	r21
 454:	47 95       	ror	r20
 456:	61 e0       	ldi	r22, 0x01	; 1
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	0e 94 0d 03 	call	0x61a	; 0x61a <DIO_voidSetPinValue>
 45e:	4c 2f       	mov	r20, r28
 460:	44 70       	andi	r20, 0x04	; 4
 462:	50 e0       	ldi	r21, 0x00	; 0
 464:	55 95       	asr	r21
 466:	47 95       	ror	r20
 468:	55 95       	asr	r21
 46a:	47 95       	ror	r20
 46c:	62 e0       	ldi	r22, 0x02	; 2
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	0e 94 0d 03 	call	0x61a	; 0x61a <DIO_voidSetPinValue>
 474:	c8 70       	andi	r28, 0x08	; 8
 476:	4c 2f       	mov	r20, r28
 478:	50 e0       	ldi	r21, 0x00	; 0
 47a:	55 95       	asr	r21
 47c:	47 95       	ror	r20
 47e:	55 95       	asr	r21
 480:	47 95       	ror	r20
 482:	55 95       	asr	r21
 484:	47 95       	ror	r20
 486:	64 e0       	ldi	r22, 0x04	; 4
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	0e 94 0d 03 	call	0x61a	; 0x61a <DIO_voidSetPinValue>
 48e:	8f e9       	ldi	r24, 0x9F	; 159
 490:	9f e0       	ldi	r25, 0x0F	; 15
 492:	01 97       	sbiw	r24, 0x01	; 1
 494:	f1 f7       	brne	.-4      	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
 496:	00 c0       	rjmp	.+0      	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
 498:	00 00       	nop
 49a:	40 e0       	ldi	r20, 0x00	; 0
 49c:	62 e0       	ldi	r22, 0x02	; 2
 49e:	80 e0       	ldi	r24, 0x00	; 0
 4a0:	0e 94 0d 03 	call	0x61a	; 0x61a <DIO_voidSetPinValue>
 4a4:	8f e9       	ldi	r24, 0x9F	; 159
 4a6:	9f e0       	ldi	r25, 0x0F	; 15
 4a8:	01 97       	sbiw	r24, 0x01	; 1
 4aa:	f1 f7       	brne	.-4      	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
 4ac:	00 c0       	rjmp	.+0      	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
 4ae:	00 00       	nop
 4b0:	cf 91       	pop	r28
 4b2:	08 95       	ret

000004b4 <LCD_displayString>:
 4b4:	cf 93       	push	r28
 4b6:	df 93       	push	r29
 4b8:	ec 01       	movw	r28, r24
 4ba:	03 c0       	rjmp	.+6      	; 0x4c2 <LCD_displayString+0xe>
 4bc:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_displayCharacter>
 4c0:	21 96       	adiw	r28, 0x01	; 1
 4c2:	88 81       	ld	r24, Y
 4c4:	81 11       	cpse	r24, r1
 4c6:	fa cf       	rjmp	.-12     	; 0x4bc <LCD_displayString+0x8>
 4c8:	df 91       	pop	r29
 4ca:	cf 91       	pop	r28
 4cc:	08 95       	ret

000004ce <LCD_moveCursor>:
 4ce:	81 30       	cpi	r24, 0x01	; 1
 4d0:	31 f0       	breq	.+12     	; 0x4de <LCD_moveCursor+0x10>
 4d2:	70 f0       	brcs	.+28     	; 0x4f0 <LCD_moveCursor+0x22>
 4d4:	82 30       	cpi	r24, 0x02	; 2
 4d6:	31 f0       	breq	.+12     	; 0x4e4 <LCD_moveCursor+0x16>
 4d8:	83 30       	cpi	r24, 0x03	; 3
 4da:	39 f0       	breq	.+14     	; 0x4ea <LCD_moveCursor+0x1c>
 4dc:	0a c0       	rjmp	.+20     	; 0x4f2 <LCD_moveCursor+0x24>
 4de:	90 e4       	ldi	r25, 0x40	; 64
 4e0:	96 0f       	add	r25, r22
 4e2:	07 c0       	rjmp	.+14     	; 0x4f2 <LCD_moveCursor+0x24>
 4e4:	90 e1       	ldi	r25, 0x10	; 16
 4e6:	96 0f       	add	r25, r22
 4e8:	04 c0       	rjmp	.+8      	; 0x4f2 <LCD_moveCursor+0x24>
 4ea:	90 e5       	ldi	r25, 0x50	; 80
 4ec:	96 0f       	add	r25, r22
 4ee:	01 c0       	rjmp	.+2      	; 0x4f2 <LCD_moveCursor+0x24>
 4f0:	96 2f       	mov	r25, r22
 4f2:	89 2f       	mov	r24, r25
 4f4:	80 68       	ori	r24, 0x80	; 128
 4f6:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_sendCommand>
 4fa:	08 95       	ret

000004fc <LCD_intgerToString>:


void LCD_intgerToString(int data)
{
 4fc:	cf 93       	push	r28
 4fe:	df 93       	push	r29
 500:	cd b7       	in	r28, 0x3d	; 61
 502:	de b7       	in	r29, 0x3e	; 62
 504:	60 97       	sbiw	r28, 0x10	; 16
 506:	0f b6       	in	r0, 0x3f	; 63
 508:	f8 94       	cli
 50a:	de bf       	out	0x3e, r29	; 62
 50c:	0f be       	out	0x3f, r0	; 63
 50e:	cd bf       	out	0x3d, r28	; 61
	char buff[16]; /* String to hold the ascii result */
	itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
 510:	4a e0       	ldi	r20, 0x0A	; 10
 512:	50 e0       	ldi	r21, 0x00	; 0
 514:	be 01       	movw	r22, r28
 516:	6f 5f       	subi	r22, 0xFF	; 255
 518:	7f 4f       	sbci	r23, 0xFF	; 255
 51a:	0e 94 66 04 	call	0x8cc	; 0x8cc <itoa>
	LCD_displayString(buff); /* Display the string */
 51e:	ce 01       	movw	r24, r28
 520:	01 96       	adiw	r24, 0x01	; 1
 522:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <LCD_displayString>
}
 526:	60 96       	adiw	r28, 0x10	; 16
 528:	0f b6       	in	r0, 0x3f	; 63
 52a:	f8 94       	cli
 52c:	de bf       	out	0x3e, r29	; 62
 52e:	0f be       	out	0x3f, r0	; 63
 530:	cd bf       	out	0x3d, r28	; 61
 532:	df 91       	pop	r29
 534:	cf 91       	pop	r28
 536:	08 95       	ret

00000538 <LED_init>:
#include "../HAL/LED_cfg.h"
#include <util/delay.h>

void LED_init(uint8 PORTID, uint8 PINID)
{
	DIO_voidSetPinDirection(PORTID,PINID,OUTPUT_PIN);
 538:	41 e0       	ldi	r20, 0x01	; 1
 53a:	0e 94 a0 02 	call	0x540	; 0x540 <DIO_voidSetPinDirection>
 53e:	08 95       	ret

00000540 <DIO_voidSetPinDirection>:
	}
}

void DIO_voidSetPinDirection(uint8 copy_u8PortID,uint8 copy_u8PinID, uint8 copy_u8PinDir)
{
	switch(copy_u8PortID)
 540:	81 30       	cpi	r24, 0x01	; 1
 542:	01 f1       	breq	.+64     	; 0x584 <DIO_voidSetPinDirection+0x44>
 544:	30 f0       	brcs	.+12     	; 0x552 <DIO_voidSetPinDirection+0x12>
 546:	82 30       	cpi	r24, 0x02	; 2
 548:	b1 f1       	breq	.+108    	; 0x5b6 <DIO_voidSetPinDirection+0x76>
 54a:	83 30       	cpi	r24, 0x03	; 3
 54c:	09 f4       	brne	.+2      	; 0x550 <DIO_voidSetPinDirection+0x10>
 54e:	4c c0       	rjmp	.+152    	; 0x5e8 <DIO_voidSetPinDirection+0xa8>
 550:	08 95       	ret
	{
		case PORTA_ID:
		if(copy_u8PinDir == OUTPUT_PIN)
 552:	41 30       	cpi	r20, 0x01	; 1
 554:	59 f4       	brne	.+22     	; 0x56c <DIO_voidSetPinDirection+0x2c>
		{
			SET_BIT(DDRA,copy_u8PinID);
 556:	2a b3       	in	r18, 0x1a	; 26
 558:	81 e0       	ldi	r24, 0x01	; 1
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	02 c0       	rjmp	.+4      	; 0x562 <DIO_voidSetPinDirection+0x22>
 55e:	88 0f       	add	r24, r24
 560:	99 1f       	adc	r25, r25
 562:	6a 95       	dec	r22
 564:	e2 f7       	brpl	.-8      	; 0x55e <DIO_voidSetPinDirection+0x1e>
 566:	82 2b       	or	r24, r18
 568:	8a bb       	out	0x1a, r24	; 26
 56a:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRA,copy_u8PinID);
 56c:	2a b3       	in	r18, 0x1a	; 26
 56e:	81 e0       	ldi	r24, 0x01	; 1
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	02 c0       	rjmp	.+4      	; 0x578 <DIO_voidSetPinDirection+0x38>
 574:	88 0f       	add	r24, r24
 576:	99 1f       	adc	r25, r25
 578:	6a 95       	dec	r22
 57a:	e2 f7       	brpl	.-8      	; 0x574 <DIO_voidSetPinDirection+0x34>
 57c:	80 95       	com	r24
 57e:	82 23       	and	r24, r18
 580:	8a bb       	out	0x1a, r24	; 26
 582:	08 95       	ret
		}
		break;
		
		case PORTB_ID:
		if(copy_u8PinDir == OUTPUT_PIN)
 584:	41 30       	cpi	r20, 0x01	; 1
 586:	59 f4       	brne	.+22     	; 0x59e <DIO_voidSetPinDirection+0x5e>
		{
			SET_BIT(DDRB,copy_u8PinID);
 588:	27 b3       	in	r18, 0x17	; 23
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	02 c0       	rjmp	.+4      	; 0x594 <DIO_voidSetPinDirection+0x54>
 590:	88 0f       	add	r24, r24
 592:	99 1f       	adc	r25, r25
 594:	6a 95       	dec	r22
 596:	e2 f7       	brpl	.-8      	; 0x590 <DIO_voidSetPinDirection+0x50>
 598:	82 2b       	or	r24, r18
 59a:	87 bb       	out	0x17, r24	; 23
 59c:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRB,copy_u8PinID);
 59e:	27 b3       	in	r18, 0x17	; 23
 5a0:	81 e0       	ldi	r24, 0x01	; 1
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	02 c0       	rjmp	.+4      	; 0x5aa <DIO_voidSetPinDirection+0x6a>
 5a6:	88 0f       	add	r24, r24
 5a8:	99 1f       	adc	r25, r25
 5aa:	6a 95       	dec	r22
 5ac:	e2 f7       	brpl	.-8      	; 0x5a6 <DIO_voidSetPinDirection+0x66>
 5ae:	80 95       	com	r24
 5b0:	82 23       	and	r24, r18
 5b2:	87 bb       	out	0x17, r24	; 23
 5b4:	08 95       	ret
		}
		break;
		
		case PORTC_ID:
		if(copy_u8PinDir == OUTPUT_PIN)
 5b6:	41 30       	cpi	r20, 0x01	; 1
 5b8:	59 f4       	brne	.+22     	; 0x5d0 <DIO_voidSetPinDirection+0x90>
		{
			SET_BIT(DDRC,copy_u8PinID);
 5ba:	24 b3       	in	r18, 0x14	; 20
 5bc:	81 e0       	ldi	r24, 0x01	; 1
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	02 c0       	rjmp	.+4      	; 0x5c6 <DIO_voidSetPinDirection+0x86>
 5c2:	88 0f       	add	r24, r24
 5c4:	99 1f       	adc	r25, r25
 5c6:	6a 95       	dec	r22
 5c8:	e2 f7       	brpl	.-8      	; 0x5c2 <DIO_voidSetPinDirection+0x82>
 5ca:	82 2b       	or	r24, r18
 5cc:	84 bb       	out	0x14, r24	; 20
 5ce:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRC,copy_u8PinID);
 5d0:	24 b3       	in	r18, 0x14	; 20
 5d2:	81 e0       	ldi	r24, 0x01	; 1
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	02 c0       	rjmp	.+4      	; 0x5dc <DIO_voidSetPinDirection+0x9c>
 5d8:	88 0f       	add	r24, r24
 5da:	99 1f       	adc	r25, r25
 5dc:	6a 95       	dec	r22
 5de:	e2 f7       	brpl	.-8      	; 0x5d8 <DIO_voidSetPinDirection+0x98>
 5e0:	80 95       	com	r24
 5e2:	82 23       	and	r24, r18
 5e4:	84 bb       	out	0x14, r24	; 20
 5e6:	08 95       	ret
		}
		break;
		
		case PORTD_ID:
		if(copy_u8PinDir == OUTPUT_PIN)
 5e8:	41 30       	cpi	r20, 0x01	; 1
 5ea:	59 f4       	brne	.+22     	; 0x602 <DIO_voidSetPinDirection+0xc2>
		{
			SET_BIT(DDRD,copy_u8PinID);
 5ec:	21 b3       	in	r18, 0x11	; 17
 5ee:	81 e0       	ldi	r24, 0x01	; 1
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	02 c0       	rjmp	.+4      	; 0x5f8 <DIO_voidSetPinDirection+0xb8>
 5f4:	88 0f       	add	r24, r24
 5f6:	99 1f       	adc	r25, r25
 5f8:	6a 95       	dec	r22
 5fa:	e2 f7       	brpl	.-8      	; 0x5f4 <DIO_voidSetPinDirection+0xb4>
 5fc:	82 2b       	or	r24, r18
 5fe:	81 bb       	out	0x11, r24	; 17
 600:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRD,copy_u8PinID);
 602:	21 b3       	in	r18, 0x11	; 17
 604:	81 e0       	ldi	r24, 0x01	; 1
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	02 c0       	rjmp	.+4      	; 0x60e <DIO_voidSetPinDirection+0xce>
 60a:	88 0f       	add	r24, r24
 60c:	99 1f       	adc	r25, r25
 60e:	6a 95       	dec	r22
 610:	e2 f7       	brpl	.-8      	; 0x60a <DIO_voidSetPinDirection+0xca>
 612:	80 95       	com	r24
 614:	82 23       	and	r24, r18
 616:	81 bb       	out	0x11, r24	; 17
 618:	08 95       	ret

0000061a <DIO_voidSetPinValue>:
		
	}
}
void DIO_voidSetPinValue(uint8 copy_u8PortID,uint8 copy_u8PinID, uint8 copy_u8PinValue)
{
	switch(copy_u8PortID)
 61a:	81 30       	cpi	r24, 0x01	; 1
 61c:	01 f1       	breq	.+64     	; 0x65e <DIO_voidSetPinValue+0x44>
 61e:	30 f0       	brcs	.+12     	; 0x62c <DIO_voidSetPinValue+0x12>
 620:	82 30       	cpi	r24, 0x02	; 2
 622:	b1 f1       	breq	.+108    	; 0x690 <DIO_voidSetPinValue+0x76>
 624:	83 30       	cpi	r24, 0x03	; 3
 626:	09 f4       	brne	.+2      	; 0x62a <DIO_voidSetPinValue+0x10>
 628:	4c c0       	rjmp	.+152    	; 0x6c2 <DIO_voidSetPinValue+0xa8>
 62a:	08 95       	ret
	{
		case PORTA_ID:
		if(copy_u8PinValue == LOGIC_HIGH)
 62c:	41 30       	cpi	r20, 0x01	; 1
 62e:	59 f4       	brne	.+22     	; 0x646 <DIO_voidSetPinValue+0x2c>
		{
			SET_BIT(PORTA,copy_u8PinID);
 630:	2b b3       	in	r18, 0x1b	; 27
 632:	81 e0       	ldi	r24, 0x01	; 1
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	02 c0       	rjmp	.+4      	; 0x63c <DIO_voidSetPinValue+0x22>
 638:	88 0f       	add	r24, r24
 63a:	99 1f       	adc	r25, r25
 63c:	6a 95       	dec	r22
 63e:	e2 f7       	brpl	.-8      	; 0x638 <DIO_voidSetPinValue+0x1e>
 640:	82 2b       	or	r24, r18
 642:	8b bb       	out	0x1b, r24	; 27
 644:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTA,copy_u8PinID);
 646:	2b b3       	in	r18, 0x1b	; 27
 648:	81 e0       	ldi	r24, 0x01	; 1
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	02 c0       	rjmp	.+4      	; 0x652 <DIO_voidSetPinValue+0x38>
 64e:	88 0f       	add	r24, r24
 650:	99 1f       	adc	r25, r25
 652:	6a 95       	dec	r22
 654:	e2 f7       	brpl	.-8      	; 0x64e <DIO_voidSetPinValue+0x34>
 656:	80 95       	com	r24
 658:	82 23       	and	r24, r18
 65a:	8b bb       	out	0x1b, r24	; 27
 65c:	08 95       	ret
		}
		break;
		
		case PORTB_ID:
		if(copy_u8PinValue == LOGIC_HIGH)
 65e:	41 30       	cpi	r20, 0x01	; 1
 660:	59 f4       	brne	.+22     	; 0x678 <DIO_voidSetPinValue+0x5e>
		{
			SET_BIT(PORTB,copy_u8PinID);
 662:	28 b3       	in	r18, 0x18	; 24
 664:	81 e0       	ldi	r24, 0x01	; 1
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	02 c0       	rjmp	.+4      	; 0x66e <DIO_voidSetPinValue+0x54>
 66a:	88 0f       	add	r24, r24
 66c:	99 1f       	adc	r25, r25
 66e:	6a 95       	dec	r22
 670:	e2 f7       	brpl	.-8      	; 0x66a <DIO_voidSetPinValue+0x50>
 672:	82 2b       	or	r24, r18
 674:	88 bb       	out	0x18, r24	; 24
 676:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTB,copy_u8PinID);
 678:	28 b3       	in	r18, 0x18	; 24
 67a:	81 e0       	ldi	r24, 0x01	; 1
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	02 c0       	rjmp	.+4      	; 0x684 <DIO_voidSetPinValue+0x6a>
 680:	88 0f       	add	r24, r24
 682:	99 1f       	adc	r25, r25
 684:	6a 95       	dec	r22
 686:	e2 f7       	brpl	.-8      	; 0x680 <DIO_voidSetPinValue+0x66>
 688:	80 95       	com	r24
 68a:	82 23       	and	r24, r18
 68c:	88 bb       	out	0x18, r24	; 24
 68e:	08 95       	ret
		}
		break;
		
		case PORTC_ID:
		if(copy_u8PinValue == LOGIC_HIGH)
 690:	41 30       	cpi	r20, 0x01	; 1
 692:	59 f4       	brne	.+22     	; 0x6aa <DIO_voidSetPinValue+0x90>
		{
			SET_BIT(PORTC,copy_u8PinID);
 694:	25 b3       	in	r18, 0x15	; 21
 696:	81 e0       	ldi	r24, 0x01	; 1
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	02 c0       	rjmp	.+4      	; 0x6a0 <DIO_voidSetPinValue+0x86>
 69c:	88 0f       	add	r24, r24
 69e:	99 1f       	adc	r25, r25
 6a0:	6a 95       	dec	r22
 6a2:	e2 f7       	brpl	.-8      	; 0x69c <DIO_voidSetPinValue+0x82>
 6a4:	82 2b       	or	r24, r18
 6a6:	85 bb       	out	0x15, r24	; 21
 6a8:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTC,copy_u8PinID);
 6aa:	25 b3       	in	r18, 0x15	; 21
 6ac:	81 e0       	ldi	r24, 0x01	; 1
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <DIO_voidSetPinValue+0x9c>
 6b2:	88 0f       	add	r24, r24
 6b4:	99 1f       	adc	r25, r25
 6b6:	6a 95       	dec	r22
 6b8:	e2 f7       	brpl	.-8      	; 0x6b2 <DIO_voidSetPinValue+0x98>
 6ba:	80 95       	com	r24
 6bc:	82 23       	and	r24, r18
 6be:	85 bb       	out	0x15, r24	; 21
 6c0:	08 95       	ret
		}
		break;
		
		case PORTD_ID:
		if(copy_u8PinValue == LOGIC_HIGH)
 6c2:	41 30       	cpi	r20, 0x01	; 1
 6c4:	59 f4       	brne	.+22     	; 0x6dc <DIO_voidSetPinValue+0xc2>
		{
			SET_BIT(PORTD,copy_u8PinID);
 6c6:	22 b3       	in	r18, 0x12	; 18
 6c8:	81 e0       	ldi	r24, 0x01	; 1
 6ca:	90 e0       	ldi	r25, 0x00	; 0
 6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <DIO_voidSetPinValue+0xb8>
 6ce:	88 0f       	add	r24, r24
 6d0:	99 1f       	adc	r25, r25
 6d2:	6a 95       	dec	r22
 6d4:	e2 f7       	brpl	.-8      	; 0x6ce <DIO_voidSetPinValue+0xb4>
 6d6:	82 2b       	or	r24, r18
 6d8:	82 bb       	out	0x12, r24	; 18
 6da:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTD,copy_u8PinID);
 6dc:	22 b3       	in	r18, 0x12	; 18
 6de:	81 e0       	ldi	r24, 0x01	; 1
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	02 c0       	rjmp	.+4      	; 0x6e8 <DIO_voidSetPinValue+0xce>
 6e4:	88 0f       	add	r24, r24
 6e6:	99 1f       	adc	r25, r25
 6e8:	6a 95       	dec	r22
 6ea:	e2 f7       	brpl	.-8      	; 0x6e4 <DIO_voidSetPinValue+0xca>
 6ec:	80 95       	com	r24
 6ee:	82 23       	and	r24, r18
 6f0:	82 bb       	out	0x12, r24	; 18
 6f2:	08 95       	ret

000006f4 <__vector_1>:
	}
}

void __vector_1()__attribute__((signal));
void __vector_1()
{
 6f4:	1f 92       	push	r1
 6f6:	0f 92       	push	r0
 6f8:	0f b6       	in	r0, 0x3f	; 63
 6fa:	0f 92       	push	r0
 6fc:	11 24       	eor	r1, r1
 6fe:	2f 93       	push	r18
 700:	3f 93       	push	r19
 702:	4f 93       	push	r20
 704:	5f 93       	push	r21
 706:	6f 93       	push	r22
 708:	7f 93       	push	r23
 70a:	8f 93       	push	r24
 70c:	9f 93       	push	r25
 70e:	af 93       	push	r26
 710:	bf 93       	push	r27
 712:	ef 93       	push	r30
 714:	ff 93       	push	r31
	EXT0_ptr();
 716:	e0 91 73 00 	lds	r30, 0x0073	; 0x800073 <EXT0_ptr>
 71a:	f0 91 74 00 	lds	r31, 0x0074	; 0x800074 <EXT0_ptr+0x1>
 71e:	09 95       	icall
}
 720:	ff 91       	pop	r31
 722:	ef 91       	pop	r30
 724:	bf 91       	pop	r27
 726:	af 91       	pop	r26
 728:	9f 91       	pop	r25
 72a:	8f 91       	pop	r24
 72c:	7f 91       	pop	r23
 72e:	6f 91       	pop	r22
 730:	5f 91       	pop	r21
 732:	4f 91       	pop	r20
 734:	3f 91       	pop	r19
 736:	2f 91       	pop	r18
 738:	0f 90       	pop	r0
 73a:	0f be       	out	0x3f, r0	; 63
 73c:	0f 90       	pop	r0
 73e:	1f 90       	pop	r1
 740:	18 95       	reti

00000742 <__vector_2>:

void __vector_2()__attribute__((signal));
void __vector_2()
{
 742:	1f 92       	push	r1
 744:	0f 92       	push	r0
 746:	0f b6       	in	r0, 0x3f	; 63
 748:	0f 92       	push	r0
 74a:	11 24       	eor	r1, r1
 74c:	2f 93       	push	r18
 74e:	3f 93       	push	r19
 750:	4f 93       	push	r20
 752:	5f 93       	push	r21
 754:	6f 93       	push	r22
 756:	7f 93       	push	r23
 758:	8f 93       	push	r24
 75a:	9f 93       	push	r25
 75c:	af 93       	push	r26
 75e:	bf 93       	push	r27
 760:	ef 93       	push	r30
 762:	ff 93       	push	r31
	EXT1_ptr();
 764:	e0 91 71 00 	lds	r30, 0x0071	; 0x800071 <EXT1_ptr>
 768:	f0 91 72 00 	lds	r31, 0x0072	; 0x800072 <EXT1_ptr+0x1>
 76c:	09 95       	icall
}
 76e:	ff 91       	pop	r31
 770:	ef 91       	pop	r30
 772:	bf 91       	pop	r27
 774:	af 91       	pop	r26
 776:	9f 91       	pop	r25
 778:	8f 91       	pop	r24
 77a:	7f 91       	pop	r23
 77c:	6f 91       	pop	r22
 77e:	5f 91       	pop	r21
 780:	4f 91       	pop	r20
 782:	3f 91       	pop	r19
 784:	2f 91       	pop	r18
 786:	0f 90       	pop	r0
 788:	0f be       	out	0x3f, r0	; 63
 78a:	0f 90       	pop	r0
 78c:	1f 90       	pop	r1
 78e:	18 95       	reti

00000790 <__vector_3>:

void __vector_3()__attribute__((signal));
void __vector_3()
{
 790:	1f 92       	push	r1
 792:	0f 92       	push	r0
 794:	0f b6       	in	r0, 0x3f	; 63
 796:	0f 92       	push	r0
 798:	11 24       	eor	r1, r1
 79a:	2f 93       	push	r18
 79c:	3f 93       	push	r19
 79e:	4f 93       	push	r20
 7a0:	5f 93       	push	r21
 7a2:	6f 93       	push	r22
 7a4:	7f 93       	push	r23
 7a6:	8f 93       	push	r24
 7a8:	9f 93       	push	r25
 7aa:	af 93       	push	r26
 7ac:	bf 93       	push	r27
 7ae:	ef 93       	push	r30
 7b0:	ff 93       	push	r31
	EXT2_ptr();
 7b2:	e0 91 6f 00 	lds	r30, 0x006F	; 0x80006f <EXT2_ptr>
 7b6:	f0 91 70 00 	lds	r31, 0x0070	; 0x800070 <EXT2_ptr+0x1>
 7ba:	09 95       	icall
}
 7bc:	ff 91       	pop	r31
 7be:	ef 91       	pop	r30
 7c0:	bf 91       	pop	r27
 7c2:	af 91       	pop	r26
 7c4:	9f 91       	pop	r25
 7c6:	8f 91       	pop	r24
 7c8:	7f 91       	pop	r23
 7ca:	6f 91       	pop	r22
 7cc:	5f 91       	pop	r21
 7ce:	4f 91       	pop	r20
 7d0:	3f 91       	pop	r19
 7d2:	2f 91       	pop	r18
 7d4:	0f 90       	pop	r0
 7d6:	0f be       	out	0x3f, r0	; 63
 7d8:	0f 90       	pop	r0
 7da:	1f 90       	pop	r1
 7dc:	18 95       	reti

000007de <GIE_enable>:
#include "../MCAL/GIE_interface.h"
#include "../Common_Macros.h"

void GIE_enable(void)
{
	SET_BIT(SREG,I_BIT);
 7de:	8f b7       	in	r24, 0x3f	; 63
 7e0:	80 68       	ori	r24, 0x80	; 128
 7e2:	8f bf       	out	0x3f, r24	; 63
 7e4:	08 95       	ret

000007e6 <TIMER0_init>:
void TIMER0_deinit()
{
	/*Stop Timer*/
	CLEAR_BIT(TCCR0,CS00);
	CLEAR_BIT(TCCR0,CS01);
	CLEAR_BIT(TCCR0,CS02);
 7e6:	83 b7       	in	r24, 0x33	; 51
 7e8:	8f 7b       	andi	r24, 0xBF	; 191
 7ea:	83 bf       	out	0x33, r24	; 51
 7ec:	83 b7       	in	r24, 0x33	; 51
 7ee:	88 60       	ori	r24, 0x08	; 8
 7f0:	83 bf       	out	0x33, r24	; 51
 7f2:	8a ef       	ldi	r24, 0xFA	; 250
 7f4:	8c bf       	out	0x3c, r24	; 60
 7f6:	89 b7       	in	r24, 0x39	; 57
 7f8:	82 60       	ori	r24, 0x02	; 2
 7fa:	89 bf       	out	0x39, r24	; 57
 7fc:	83 b7       	in	r24, 0x33	; 51
 7fe:	81 60       	ori	r24, 0x01	; 1
 800:	83 bf       	out	0x33, r24	; 51
 802:	83 b7       	in	r24, 0x33	; 51
 804:	82 60       	ori	r24, 0x02	; 2
 806:	83 bf       	out	0x33, r24	; 51
 808:	83 b7       	in	r24, 0x33	; 51
 80a:	8b 7f       	andi	r24, 0xFB	; 251
 80c:	83 bf       	out	0x33, r24	; 51
 80e:	12 be       	out	0x32, r1	; 50
 810:	08 95       	ret

00000812 <TIMER0_callback>:
 812:	88 23       	and	r24, r24
 814:	19 f0       	breq	.+6      	; 0x81c <TIMER0_callback+0xa>
 816:	82 30       	cpi	r24, 0x02	; 2
 818:	31 f0       	breq	.+12     	; 0x826 <TIMER0_callback+0x14>
 81a:	08 95       	ret
 81c:	70 93 76 00 	sts	0x0076, r23	; 0x800076 <TIMER0_OVF_ptr+0x1>
 820:	60 93 75 00 	sts	0x0075, r22	; 0x800075 <TIMER0_OVF_ptr>
 824:	08 95       	ret
 826:	70 93 78 00 	sts	0x0078, r23	; 0x800078 <TIMER0_CMP_ptr+0x1>
 82a:	60 93 77 00 	sts	0x0077, r22	; 0x800077 <TIMER0_CMP_ptr>
 82e:	08 95       	ret

00000830 <__vector_11>:
}
/*Timer 0 overflow ISR*/
void __vector_11()__attribute__((signal));
void __vector_11()
{
 830:	1f 92       	push	r1
 832:	0f 92       	push	r0
 834:	0f b6       	in	r0, 0x3f	; 63
 836:	0f 92       	push	r0
 838:	11 24       	eor	r1, r1
 83a:	2f 93       	push	r18
 83c:	3f 93       	push	r19
 83e:	4f 93       	push	r20
 840:	5f 93       	push	r21
 842:	6f 93       	push	r22
 844:	7f 93       	push	r23
 846:	8f 93       	push	r24
 848:	9f 93       	push	r25
 84a:	af 93       	push	r26
 84c:	bf 93       	push	r27
 84e:	ef 93       	push	r30
 850:	ff 93       	push	r31
	TIMER0_OVF_ptr();
 852:	e0 91 75 00 	lds	r30, 0x0075	; 0x800075 <TIMER0_OVF_ptr>
 856:	f0 91 76 00 	lds	r31, 0x0076	; 0x800076 <TIMER0_OVF_ptr+0x1>
 85a:	09 95       	icall
}
 85c:	ff 91       	pop	r31
 85e:	ef 91       	pop	r30
 860:	bf 91       	pop	r27
 862:	af 91       	pop	r26
 864:	9f 91       	pop	r25
 866:	8f 91       	pop	r24
 868:	7f 91       	pop	r23
 86a:	6f 91       	pop	r22
 86c:	5f 91       	pop	r21
 86e:	4f 91       	pop	r20
 870:	3f 91       	pop	r19
 872:	2f 91       	pop	r18
 874:	0f 90       	pop	r0
 876:	0f be       	out	0x3f, r0	; 63
 878:	0f 90       	pop	r0
 87a:	1f 90       	pop	r1
 87c:	18 95       	reti

0000087e <__vector_10>:

/*Timer 0 compare ISR*/
void __vector_10()__attribute__((signal));
void __vector_10()
{
 87e:	1f 92       	push	r1
 880:	0f 92       	push	r0
 882:	0f b6       	in	r0, 0x3f	; 63
 884:	0f 92       	push	r0
 886:	11 24       	eor	r1, r1
 888:	2f 93       	push	r18
 88a:	3f 93       	push	r19
 88c:	4f 93       	push	r20
 88e:	5f 93       	push	r21
 890:	6f 93       	push	r22
 892:	7f 93       	push	r23
 894:	8f 93       	push	r24
 896:	9f 93       	push	r25
 898:	af 93       	push	r26
 89a:	bf 93       	push	r27
 89c:	ef 93       	push	r30
 89e:	ff 93       	push	r31
	TIMER0_CMP_ptr();
 8a0:	e0 91 77 00 	lds	r30, 0x0077	; 0x800077 <TIMER0_CMP_ptr>
 8a4:	f0 91 78 00 	lds	r31, 0x0078	; 0x800078 <TIMER0_CMP_ptr+0x1>
 8a8:	09 95       	icall
}
 8aa:	ff 91       	pop	r31
 8ac:	ef 91       	pop	r30
 8ae:	bf 91       	pop	r27
 8b0:	af 91       	pop	r26
 8b2:	9f 91       	pop	r25
 8b4:	8f 91       	pop	r24
 8b6:	7f 91       	pop	r23
 8b8:	6f 91       	pop	r22
 8ba:	5f 91       	pop	r21
 8bc:	4f 91       	pop	r20
 8be:	3f 91       	pop	r19
 8c0:	2f 91       	pop	r18
 8c2:	0f 90       	pop	r0
 8c4:	0f be       	out	0x3f, r0	; 63
 8c6:	0f 90       	pop	r0
 8c8:	1f 90       	pop	r1
 8ca:	18 95       	reti

000008cc <itoa>:
 8cc:	45 32       	cpi	r20, 0x25	; 37
 8ce:	51 05       	cpc	r21, r1
 8d0:	20 f4       	brcc	.+8      	; 0x8da <itoa+0xe>
 8d2:	42 30       	cpi	r20, 0x02	; 2
 8d4:	10 f0       	brcs	.+4      	; 0x8da <itoa+0xe>
 8d6:	0c 94 71 04 	jmp	0x8e2	; 0x8e2 <__itoa_ncheck>
 8da:	fb 01       	movw	r30, r22
 8dc:	10 82       	st	Z, r1
 8de:	cb 01       	movw	r24, r22
 8e0:	08 95       	ret

000008e2 <__itoa_ncheck>:
 8e2:	bb 27       	eor	r27, r27
 8e4:	4a 30       	cpi	r20, 0x0A	; 10
 8e6:	31 f4       	brne	.+12     	; 0x8f4 <__itoa_ncheck+0x12>
 8e8:	99 23       	and	r25, r25
 8ea:	22 f4       	brpl	.+8      	; 0x8f4 <__itoa_ncheck+0x12>
 8ec:	bd e2       	ldi	r27, 0x2D	; 45
 8ee:	90 95       	com	r25
 8f0:	81 95       	neg	r24
 8f2:	9f 4f       	sbci	r25, 0xFF	; 255
 8f4:	0c 94 7d 04 	jmp	0x8fa	; 0x8fa <__utoa_common>

000008f8 <__utoa_ncheck>:
 8f8:	bb 27       	eor	r27, r27

000008fa <__utoa_common>:
 8fa:	fb 01       	movw	r30, r22
 8fc:	55 27       	eor	r21, r21
 8fe:	aa 27       	eor	r26, r26
 900:	88 0f       	add	r24, r24
 902:	99 1f       	adc	r25, r25
 904:	aa 1f       	adc	r26, r26
 906:	a4 17       	cp	r26, r20
 908:	10 f0       	brcs	.+4      	; 0x90e <__utoa_common+0x14>
 90a:	a4 1b       	sub	r26, r20
 90c:	83 95       	inc	r24
 90e:	50 51       	subi	r21, 0x10	; 16
 910:	b9 f7       	brne	.-18     	; 0x900 <__utoa_common+0x6>
 912:	a0 5d       	subi	r26, 0xD0	; 208
 914:	aa 33       	cpi	r26, 0x3A	; 58
 916:	08 f0       	brcs	.+2      	; 0x91a <__utoa_common+0x20>
 918:	a9 5d       	subi	r26, 0xD9	; 217
 91a:	a1 93       	st	Z+, r26
 91c:	00 97       	sbiw	r24, 0x00	; 0
 91e:	79 f7       	brne	.-34     	; 0x8fe <__utoa_common+0x4>
 920:	b1 11       	cpse	r27, r1
 922:	b1 93       	st	Z+, r27
 924:	11 92       	st	Z+, r1
 926:	cb 01       	movw	r24, r22
 928:	0c 94 96 04 	jmp	0x92c	; 0x92c <strrev>

0000092c <strrev>:
 92c:	dc 01       	movw	r26, r24
 92e:	fc 01       	movw	r30, r24
 930:	67 2f       	mov	r22, r23
 932:	71 91       	ld	r23, Z+
 934:	77 23       	and	r23, r23
 936:	e1 f7       	brne	.-8      	; 0x930 <strrev+0x4>
 938:	32 97       	sbiw	r30, 0x02	; 2
 93a:	04 c0       	rjmp	.+8      	; 0x944 <strrev+0x18>
 93c:	7c 91       	ld	r23, X
 93e:	6d 93       	st	X+, r22
 940:	70 83       	st	Z, r23
 942:	62 91       	ld	r22, -Z
 944:	ae 17       	cp	r26, r30
 946:	bf 07       	cpc	r27, r31
 948:	c8 f3       	brcs	.-14     	; 0x93c <strrev+0x10>
 94a:	08 95       	ret

0000094c <_exit>:
 94c:	f8 94       	cli

0000094e <__stop_program>:
 94e:	ff cf       	rjmp	.-2      	; 0x94e <__stop_program>
