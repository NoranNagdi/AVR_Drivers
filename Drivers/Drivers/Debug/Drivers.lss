
Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ac8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000ac8  00000b5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  0080006c  0080006c  00000b68  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b68  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b98  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00000bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a38  00000000  00000000  00000d34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009fe  00000000  00000000  0000276c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d1f  00000000  00000000  0000316a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000330  00000000  00000000  00003e8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000074e  00000000  00000000  000041bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c4d  00000000  00000000  0000490a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00005557  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 78 04 	jmp	0x8f0	; 0x8f0 <__vector_1>
   8:	0c 94 9f 04 	jmp	0x93e	; 0x93e <__vector_2>
   c:	0c 94 c6 04 	jmp	0x98c	; 0x98c <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ec       	ldi	r30, 0xC8	; 200
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 37       	cpi	r26, 0x7A	; 122
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 67 00 	call	0xce	; 0xce <main>
  8a:	0c 94 62 05 	jmp	0xac4	; 0xac4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <interrupt1>:
uint16 analogValue = 0;
uint16 tempValue = 0;

void interrupt1(void)
{
	ADC_autotrigger_init();
  92:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <ADC_autotrigger_init>
	ADC_autotrigger_readChannel(CH_1,ptr2);
  96:	60 91 70 00 	lds	r22, 0x0070	; 0x800070 <ptr2>
  9a:	70 91 71 00 	lds	r23, 0x0071	; 0x800071 <ptr2+0x1>
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	0e 94 00 03 	call	0x600	; 0x600 <ADC_autotrigger_readChannel>
	tempValue = ((*ptr2 * 5000UL)/1024)/10;
  a4:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <ptr2>
  a8:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <ptr2+0x1>
  ac:	20 81       	ld	r18, Z
  ae:	31 81       	ldd	r19, Z+1	; 0x01
  b0:	a8 e8       	ldi	r26, 0x88	; 136
  b2:	b3 e1       	ldi	r27, 0x13	; 19
  b4:	0e 94 13 05 	call	0xa26	; 0xa26 <__umulhisi3>
  b8:	20 e0       	ldi	r18, 0x00	; 0
  ba:	38 e2       	ldi	r19, 0x28	; 40
  bc:	40 e0       	ldi	r20, 0x00	; 0
  be:	50 e0       	ldi	r21, 0x00	; 0
  c0:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <__udivmodsi4>
  c4:	30 93 6d 00 	sts	0x006D, r19	; 0x80006d <__data_end+0x1>
  c8:	20 93 6c 00 	sts	0x006C, r18	; 0x80006c <__data_end>
  cc:	08 95       	ret

000000ce <main>:
	
}
int main(void)
{
	DIO_voidSetPinDirection(PORTA_ID,PIN0_ID,INPUT_PIN);
  ce:	40 e0       	ldi	r20, 0x00	; 0
  d0:	60 e0       	ldi	r22, 0x00	; 0
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	0e 94 12 03 	call	0x624	; 0x624 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTA_ID,PIN1_ID,INPUT_PIN);
  d8:	40 e0       	ldi	r20, 0x00	; 0
  da:	61 e0       	ldi	r22, 0x01	; 1
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	0e 94 12 03 	call	0x624	; 0x624 <DIO_voidSetPinDirection>
	
	DIO_voidSetPinDirection(PORTD_ID,PIN5_ID,INPUT_PIN);
  e2:	40 e0       	ldi	r20, 0x00	; 0
  e4:	65 e0       	ldi	r22, 0x05	; 5
  e6:	83 e0       	ldi	r24, 0x03	; 3
  e8:	0e 94 12 03 	call	0x624	; 0x624 <DIO_voidSetPinDirection>
	
	LCD_init();
  ec:	0e 94 71 01 	call	0x2e2	; 0x2e2 <LCD_init>
	LCD_displayString("LDR ");
  f0:	80 e6       	ldi	r24, 0x60	; 96
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 50 02 	call	0x4a0	; 0x4a0 <LCD_displayString>
	//EXT_callback(EXT_0, interrupt0);
	EXT_init(EXT_0, FALLING);
  f8:	62 e0       	ldi	r22, 0x02	; 2
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <EXT_init>
	
	EXT_callback(EXT_1, interrupt1);
 100:	69 e4       	ldi	r22, 0x49	; 73
 102:	70 e0       	ldi	r23, 0x00	; 0
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	0e 94 63 04 	call	0x8c6	; 0x8c6 <EXT_callback>
	EXT_init(EXT_1, FALLING);
 10a:	62 e0       	ldi	r22, 0x02	; 2
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <EXT_init>
	
	ADC_init();
 112:	0e 94 92 02 	call	0x524	; 0x524 <ADC_init>
	GIE_enable();
 116:	0e 94 ed 04 	call	0x9da	; 0x9da <GIE_enable>

    while (1) 
    {	
		ADC_init();
 11a:	0e 94 92 02 	call	0x524	; 0x524 <ADC_init>
		ADC_readChannel(CH_0,ptr1);
 11e:	60 91 72 00 	lds	r22, 0x0072	; 0x800072 <ptr1>
 122:	70 91 73 00 	lds	r23, 0x0073	; 0x800073 <ptr1+0x1>
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	0e 94 bd 02 	call	0x57a	; 0x57a <ADC_readChannel>
		analogValue = (*ptr1 * 5000UL)/1024;
 12c:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <ptr1>
 130:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <ptr1+0x1>
 134:	20 81       	ld	r18, Z
 136:	31 81       	ldd	r19, Z+1	; 0x01
 138:	a8 e8       	ldi	r26, 0x88	; 136
 13a:	b3 e1       	ldi	r27, 0x13	; 19
 13c:	0e 94 13 05 	call	0xa26	; 0xa26 <__umulhisi3>
 140:	dc 01       	movw	r26, r24
 142:	cb 01       	movw	r24, r22
 144:	07 2e       	mov	r0, r23
 146:	7a e0       	ldi	r23, 0x0A	; 10
 148:	b6 95       	lsr	r27
 14a:	a7 95       	ror	r26
 14c:	97 95       	ror	r25
 14e:	87 95       	ror	r24
 150:	7a 95       	dec	r23
 152:	d1 f7       	brne	.-12     	; 0x148 <main+0x7a>
 154:	70 2d       	mov	r23, r0
 156:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <analogValue+0x1>
 15a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <analogValue>
		LCD_moveCursor(0,5);
 15e:	65 e0       	ldi	r22, 0x05	; 5
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	0e 94 5d 02 	call	0x4ba	; 0x4ba <LCD_moveCursor>
		LCD_intgerToString(analogValue);
 166:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <analogValue>
 16a:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <analogValue+0x1>
 16e:	0e 94 74 02 	call	0x4e8	; 0x4e8 <LCD_intgerToString>
		
		LCD_moveCursor(1,0);
 172:	60 e0       	ldi	r22, 0x00	; 0
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	0e 94 5d 02 	call	0x4ba	; 0x4ba <LCD_moveCursor>
		LCD_displayString("Temp ");
 17a:	85 e6       	ldi	r24, 0x65	; 101
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0e 94 50 02 	call	0x4a0	; 0x4a0 <LCD_displayString>
		LCD_moveCursor(1,6);
 182:	66 e0       	ldi	r22, 0x06	; 6
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	0e 94 5d 02 	call	0x4ba	; 0x4ba <LCD_moveCursor>
		LCD_intgerToString(tempValue);
 18a:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 18e:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <__data_end+0x1>
 192:	0e 94 74 02 	call	0x4e8	; 0x4e8 <LCD_intgerToString>
 196:	c1 cf       	rjmp	.-126    	; 0x11a <main+0x4c>

00000198 <LCD_sendCommand>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
	LCD_moveCursor(row,col); /* go to to the required LCD position */
	LCD_displayString(Str); /* display the string */
}
 198:	cf 93       	push	r28
 19a:	c8 2f       	mov	r28, r24
 19c:	40 e0       	ldi	r20, 0x00	; 0
 19e:	63 e0       	ldi	r22, 0x03	; 3
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	0e 94 7f 03 	call	0x6fe	; 0x6fe <DIO_voidSetPinValue>
 1a6:	8f e9       	ldi	r24, 0x9F	; 159
 1a8:	9f e0       	ldi	r25, 0x0F	; 15
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <LCD_sendCommand+0x12>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <LCD_sendCommand+0x18>
 1b0:	00 00       	nop
 1b2:	41 e0       	ldi	r20, 0x01	; 1
 1b4:	62 e0       	ldi	r22, 0x02	; 2
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	0e 94 7f 03 	call	0x6fe	; 0x6fe <DIO_voidSetPinValue>
 1bc:	8f e9       	ldi	r24, 0x9F	; 159
 1be:	9f e0       	ldi	r25, 0x0F	; 15
 1c0:	01 97       	sbiw	r24, 0x01	; 1
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <LCD_sendCommand+0x28>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <LCD_sendCommand+0x2e>
 1c6:	00 00       	nop
 1c8:	4c 2f       	mov	r20, r28
 1ca:	40 71       	andi	r20, 0x10	; 16
 1cc:	50 e0       	ldi	r21, 0x00	; 0
 1ce:	55 95       	asr	r21
 1d0:	47 95       	ror	r20
 1d2:	55 95       	asr	r21
 1d4:	47 95       	ror	r20
 1d6:	55 95       	asr	r21
 1d8:	47 95       	ror	r20
 1da:	55 95       	asr	r21
 1dc:	47 95       	ror	r20
 1de:	60 e0       	ldi	r22, 0x00	; 0
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	0e 94 7f 03 	call	0x6fe	; 0x6fe <DIO_voidSetPinValue>
 1e6:	4c 2f       	mov	r20, r28
 1e8:	40 72       	andi	r20, 0x20	; 32
 1ea:	50 e0       	ldi	r21, 0x00	; 0
 1ec:	55 95       	asr	r21
 1ee:	47 95       	ror	r20
 1f0:	55 95       	asr	r21
 1f2:	47 95       	ror	r20
 1f4:	55 95       	asr	r21
 1f6:	47 95       	ror	r20
 1f8:	55 95       	asr	r21
 1fa:	47 95       	ror	r20
 1fc:	55 95       	asr	r21
 1fe:	47 95       	ror	r20
 200:	61 e0       	ldi	r22, 0x01	; 1
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	0e 94 7f 03 	call	0x6fe	; 0x6fe <DIO_voidSetPinValue>
 208:	4c 2f       	mov	r20, r28
 20a:	40 74       	andi	r20, 0x40	; 64
 20c:	50 e0       	ldi	r21, 0x00	; 0
 20e:	04 2e       	mov	r0, r20
 210:	45 2f       	mov	r20, r21
 212:	00 0c       	add	r0, r0
 214:	44 1f       	adc	r20, r20
 216:	55 0b       	sbc	r21, r21
 218:	00 0c       	add	r0, r0
 21a:	44 1f       	adc	r20, r20
 21c:	55 1f       	adc	r21, r21
 21e:	62 e0       	ldi	r22, 0x02	; 2
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	0e 94 7f 03 	call	0x6fe	; 0x6fe <DIO_voidSetPinValue>
 226:	4c 2f       	mov	r20, r28
 228:	44 1f       	adc	r20, r20
 22a:	44 27       	eor	r20, r20
 22c:	44 1f       	adc	r20, r20
 22e:	64 e0       	ldi	r22, 0x04	; 4
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	0e 94 7f 03 	call	0x6fe	; 0x6fe <DIO_voidSetPinValue>
 236:	8f e9       	ldi	r24, 0x9F	; 159
 238:	9f e0       	ldi	r25, 0x0F	; 15
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <LCD_sendCommand+0xa2>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <LCD_sendCommand+0xa8>
 240:	00 00       	nop
 242:	40 e0       	ldi	r20, 0x00	; 0
 244:	62 e0       	ldi	r22, 0x02	; 2
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	0e 94 7f 03 	call	0x6fe	; 0x6fe <DIO_voidSetPinValue>
 24c:	8f e9       	ldi	r24, 0x9F	; 159
 24e:	9f e0       	ldi	r25, 0x0F	; 15
 250:	01 97       	sbiw	r24, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <LCD_sendCommand+0xb8>
 254:	00 c0       	rjmp	.+0      	; 0x256 <LCD_sendCommand+0xbe>
 256:	00 00       	nop
 258:	41 e0       	ldi	r20, 0x01	; 1
 25a:	62 e0       	ldi	r22, 0x02	; 2
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	0e 94 7f 03 	call	0x6fe	; 0x6fe <DIO_voidSetPinValue>
 262:	8f e9       	ldi	r24, 0x9F	; 159
 264:	9f e0       	ldi	r25, 0x0F	; 15
 266:	01 97       	sbiw	r24, 0x01	; 1
 268:	f1 f7       	brne	.-4      	; 0x266 <LCD_sendCommand+0xce>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <LCD_sendCommand+0xd4>
 26c:	00 00       	nop
 26e:	4c 2f       	mov	r20, r28
 270:	41 70       	andi	r20, 0x01	; 1
 272:	60 e0       	ldi	r22, 0x00	; 0
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	0e 94 7f 03 	call	0x6fe	; 0x6fe <DIO_voidSetPinValue>
 27a:	4c 2f       	mov	r20, r28
 27c:	42 70       	andi	r20, 0x02	; 2
 27e:	50 e0       	ldi	r21, 0x00	; 0
 280:	55 95       	asr	r21
 282:	47 95       	ror	r20
 284:	61 e0       	ldi	r22, 0x01	; 1
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	0e 94 7f 03 	call	0x6fe	; 0x6fe <DIO_voidSetPinValue>
 28c:	4c 2f       	mov	r20, r28
 28e:	44 70       	andi	r20, 0x04	; 4
 290:	50 e0       	ldi	r21, 0x00	; 0
 292:	55 95       	asr	r21
 294:	47 95       	ror	r20
 296:	55 95       	asr	r21
 298:	47 95       	ror	r20
 29a:	62 e0       	ldi	r22, 0x02	; 2
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	0e 94 7f 03 	call	0x6fe	; 0x6fe <DIO_voidSetPinValue>
 2a2:	c8 70       	andi	r28, 0x08	; 8
 2a4:	4c 2f       	mov	r20, r28
 2a6:	50 e0       	ldi	r21, 0x00	; 0
 2a8:	55 95       	asr	r21
 2aa:	47 95       	ror	r20
 2ac:	55 95       	asr	r21
 2ae:	47 95       	ror	r20
 2b0:	55 95       	asr	r21
 2b2:	47 95       	ror	r20
 2b4:	64 e0       	ldi	r22, 0x04	; 4
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	0e 94 7f 03 	call	0x6fe	; 0x6fe <DIO_voidSetPinValue>
 2bc:	8f e9       	ldi	r24, 0x9F	; 159
 2be:	9f e0       	ldi	r25, 0x0F	; 15
 2c0:	01 97       	sbiw	r24, 0x01	; 1
 2c2:	f1 f7       	brne	.-4      	; 0x2c0 <LCD_sendCommand+0x128>
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <LCD_sendCommand+0x12e>
 2c6:	00 00       	nop
 2c8:	40 e0       	ldi	r20, 0x00	; 0
 2ca:	62 e0       	ldi	r22, 0x02	; 2
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	0e 94 7f 03 	call	0x6fe	; 0x6fe <DIO_voidSetPinValue>
 2d2:	8f e9       	ldi	r24, 0x9F	; 159
 2d4:	9f e0       	ldi	r25, 0x0F	; 15
 2d6:	01 97       	sbiw	r24, 0x01	; 1
 2d8:	f1 f7       	brne	.-4      	; 0x2d6 <LCD_sendCommand+0x13e>
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <LCD_sendCommand+0x144>
 2dc:	00 00       	nop
 2de:	cf 91       	pop	r28
 2e0:	08 95       	ret

000002e2 <LCD_init>:
 2e2:	41 e0       	ldi	r20, 0x01	; 1
 2e4:	63 e0       	ldi	r22, 0x03	; 3
 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	0e 94 12 03 	call	0x624	; 0x624 <DIO_voidSetPinDirection>
 2ec:	41 e0       	ldi	r20, 0x01	; 1
 2ee:	62 e0       	ldi	r22, 0x02	; 2
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	0e 94 12 03 	call	0x624	; 0x624 <DIO_voidSetPinDirection>
 2f6:	2f ef       	ldi	r18, 0xFF	; 255
 2f8:	89 ef       	ldi	r24, 0xF9	; 249
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	21 50       	subi	r18, 0x01	; 1
 2fe:	80 40       	sbci	r24, 0x00	; 0
 300:	90 40       	sbci	r25, 0x00	; 0
 302:	e1 f7       	brne	.-8      	; 0x2fc <LCD_init+0x1a>
 304:	00 c0       	rjmp	.+0      	; 0x306 <LCD_init+0x24>
 306:	00 00       	nop
 308:	41 e0       	ldi	r20, 0x01	; 1
 30a:	60 e0       	ldi	r22, 0x00	; 0
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	0e 94 12 03 	call	0x624	; 0x624 <DIO_voidSetPinDirection>
 312:	41 e0       	ldi	r20, 0x01	; 1
 314:	61 e0       	ldi	r22, 0x01	; 1
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	0e 94 12 03 	call	0x624	; 0x624 <DIO_voidSetPinDirection>
 31c:	41 e0       	ldi	r20, 0x01	; 1
 31e:	62 e0       	ldi	r22, 0x02	; 2
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	0e 94 12 03 	call	0x624	; 0x624 <DIO_voidSetPinDirection>
 326:	41 e0       	ldi	r20, 0x01	; 1
 328:	64 e0       	ldi	r22, 0x04	; 4
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	0e 94 12 03 	call	0x624	; 0x624 <DIO_voidSetPinDirection>
 330:	83 e3       	ldi	r24, 0x33	; 51
 332:	0e 94 cc 00 	call	0x198	; 0x198 <LCD_sendCommand>
 336:	82 e3       	ldi	r24, 0x32	; 50
 338:	0e 94 cc 00 	call	0x198	; 0x198 <LCD_sendCommand>
 33c:	88 e2       	ldi	r24, 0x28	; 40
 33e:	0e 94 cc 00 	call	0x198	; 0x198 <LCD_sendCommand>
 342:	86 e0       	ldi	r24, 0x06	; 6
 344:	0e 94 cc 00 	call	0x198	; 0x198 <LCD_sendCommand>
 348:	8c e0       	ldi	r24, 0x0C	; 12
 34a:	0e 94 cc 00 	call	0x198	; 0x198 <LCD_sendCommand>
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	0e 94 cc 00 	call	0x198	; 0x198 <LCD_sendCommand>
 354:	08 95       	ret

00000356 <LCD_displayCharacter>:
 356:	cf 93       	push	r28
 358:	c8 2f       	mov	r28, r24
 35a:	41 e0       	ldi	r20, 0x01	; 1
 35c:	63 e0       	ldi	r22, 0x03	; 3
 35e:	80 e0       	ldi	r24, 0x00	; 0
 360:	0e 94 7f 03 	call	0x6fe	; 0x6fe <DIO_voidSetPinValue>
 364:	8f e9       	ldi	r24, 0x9F	; 159
 366:	9f e0       	ldi	r25, 0x0F	; 15
 368:	01 97       	sbiw	r24, 0x01	; 1
 36a:	f1 f7       	brne	.-4      	; 0x368 <LCD_displayCharacter+0x12>
 36c:	00 c0       	rjmp	.+0      	; 0x36e <LCD_displayCharacter+0x18>
 36e:	00 00       	nop
 370:	41 e0       	ldi	r20, 0x01	; 1
 372:	62 e0       	ldi	r22, 0x02	; 2
 374:	80 e0       	ldi	r24, 0x00	; 0
 376:	0e 94 7f 03 	call	0x6fe	; 0x6fe <DIO_voidSetPinValue>
 37a:	8f e9       	ldi	r24, 0x9F	; 159
 37c:	9f e0       	ldi	r25, 0x0F	; 15
 37e:	01 97       	sbiw	r24, 0x01	; 1
 380:	f1 f7       	brne	.-4      	; 0x37e <LCD_displayCharacter+0x28>
 382:	00 c0       	rjmp	.+0      	; 0x384 <LCD_displayCharacter+0x2e>
 384:	00 00       	nop
 386:	4c 2f       	mov	r20, r28
 388:	40 71       	andi	r20, 0x10	; 16
 38a:	50 e0       	ldi	r21, 0x00	; 0
 38c:	55 95       	asr	r21
 38e:	47 95       	ror	r20
 390:	55 95       	asr	r21
 392:	47 95       	ror	r20
 394:	55 95       	asr	r21
 396:	47 95       	ror	r20
 398:	55 95       	asr	r21
 39a:	47 95       	ror	r20
 39c:	60 e0       	ldi	r22, 0x00	; 0
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	0e 94 7f 03 	call	0x6fe	; 0x6fe <DIO_voidSetPinValue>
 3a4:	4c 2f       	mov	r20, r28
 3a6:	40 72       	andi	r20, 0x20	; 32
 3a8:	50 e0       	ldi	r21, 0x00	; 0
 3aa:	55 95       	asr	r21
 3ac:	47 95       	ror	r20
 3ae:	55 95       	asr	r21
 3b0:	47 95       	ror	r20
 3b2:	55 95       	asr	r21
 3b4:	47 95       	ror	r20
 3b6:	55 95       	asr	r21
 3b8:	47 95       	ror	r20
 3ba:	55 95       	asr	r21
 3bc:	47 95       	ror	r20
 3be:	61 e0       	ldi	r22, 0x01	; 1
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	0e 94 7f 03 	call	0x6fe	; 0x6fe <DIO_voidSetPinValue>
 3c6:	4c 2f       	mov	r20, r28
 3c8:	40 74       	andi	r20, 0x40	; 64
 3ca:	50 e0       	ldi	r21, 0x00	; 0
 3cc:	04 2e       	mov	r0, r20
 3ce:	45 2f       	mov	r20, r21
 3d0:	00 0c       	add	r0, r0
 3d2:	44 1f       	adc	r20, r20
 3d4:	55 0b       	sbc	r21, r21
 3d6:	00 0c       	add	r0, r0
 3d8:	44 1f       	adc	r20, r20
 3da:	55 1f       	adc	r21, r21
 3dc:	62 e0       	ldi	r22, 0x02	; 2
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	0e 94 7f 03 	call	0x6fe	; 0x6fe <DIO_voidSetPinValue>
 3e4:	4c 2f       	mov	r20, r28
 3e6:	44 1f       	adc	r20, r20
 3e8:	44 27       	eor	r20, r20
 3ea:	44 1f       	adc	r20, r20
 3ec:	64 e0       	ldi	r22, 0x04	; 4
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	0e 94 7f 03 	call	0x6fe	; 0x6fe <DIO_voidSetPinValue>
 3f4:	8f e9       	ldi	r24, 0x9F	; 159
 3f6:	9f e0       	ldi	r25, 0x0F	; 15
 3f8:	01 97       	sbiw	r24, 0x01	; 1
 3fa:	f1 f7       	brne	.-4      	; 0x3f8 <LCD_displayCharacter+0xa2>
 3fc:	00 c0       	rjmp	.+0      	; 0x3fe <LCD_displayCharacter+0xa8>
 3fe:	00 00       	nop
 400:	40 e0       	ldi	r20, 0x00	; 0
 402:	62 e0       	ldi	r22, 0x02	; 2
 404:	80 e0       	ldi	r24, 0x00	; 0
 406:	0e 94 7f 03 	call	0x6fe	; 0x6fe <DIO_voidSetPinValue>
 40a:	8f e9       	ldi	r24, 0x9F	; 159
 40c:	9f e0       	ldi	r25, 0x0F	; 15
 40e:	01 97       	sbiw	r24, 0x01	; 1
 410:	f1 f7       	brne	.-4      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 412:	00 c0       	rjmp	.+0      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 414:	00 00       	nop
 416:	41 e0       	ldi	r20, 0x01	; 1
 418:	62 e0       	ldi	r22, 0x02	; 2
 41a:	80 e0       	ldi	r24, 0x00	; 0
 41c:	0e 94 7f 03 	call	0x6fe	; 0x6fe <DIO_voidSetPinValue>
 420:	8f e9       	ldi	r24, 0x9F	; 159
 422:	9f e0       	ldi	r25, 0x0F	; 15
 424:	01 97       	sbiw	r24, 0x01	; 1
 426:	f1 f7       	brne	.-4      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 428:	00 c0       	rjmp	.+0      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 42a:	00 00       	nop
 42c:	4c 2f       	mov	r20, r28
 42e:	41 70       	andi	r20, 0x01	; 1
 430:	60 e0       	ldi	r22, 0x00	; 0
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	0e 94 7f 03 	call	0x6fe	; 0x6fe <DIO_voidSetPinValue>
 438:	4c 2f       	mov	r20, r28
 43a:	42 70       	andi	r20, 0x02	; 2
 43c:	50 e0       	ldi	r21, 0x00	; 0
 43e:	55 95       	asr	r21
 440:	47 95       	ror	r20
 442:	61 e0       	ldi	r22, 0x01	; 1
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	0e 94 7f 03 	call	0x6fe	; 0x6fe <DIO_voidSetPinValue>
 44a:	4c 2f       	mov	r20, r28
 44c:	44 70       	andi	r20, 0x04	; 4
 44e:	50 e0       	ldi	r21, 0x00	; 0
 450:	55 95       	asr	r21
 452:	47 95       	ror	r20
 454:	55 95       	asr	r21
 456:	47 95       	ror	r20
 458:	62 e0       	ldi	r22, 0x02	; 2
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	0e 94 7f 03 	call	0x6fe	; 0x6fe <DIO_voidSetPinValue>
 460:	c8 70       	andi	r28, 0x08	; 8
 462:	4c 2f       	mov	r20, r28
 464:	50 e0       	ldi	r21, 0x00	; 0
 466:	55 95       	asr	r21
 468:	47 95       	ror	r20
 46a:	55 95       	asr	r21
 46c:	47 95       	ror	r20
 46e:	55 95       	asr	r21
 470:	47 95       	ror	r20
 472:	64 e0       	ldi	r22, 0x04	; 4
 474:	81 e0       	ldi	r24, 0x01	; 1
 476:	0e 94 7f 03 	call	0x6fe	; 0x6fe <DIO_voidSetPinValue>
 47a:	8f e9       	ldi	r24, 0x9F	; 159
 47c:	9f e0       	ldi	r25, 0x0F	; 15
 47e:	01 97       	sbiw	r24, 0x01	; 1
 480:	f1 f7       	brne	.-4      	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 482:	00 c0       	rjmp	.+0      	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 484:	00 00       	nop
 486:	40 e0       	ldi	r20, 0x00	; 0
 488:	62 e0       	ldi	r22, 0x02	; 2
 48a:	80 e0       	ldi	r24, 0x00	; 0
 48c:	0e 94 7f 03 	call	0x6fe	; 0x6fe <DIO_voidSetPinValue>
 490:	8f e9       	ldi	r24, 0x9F	; 159
 492:	9f e0       	ldi	r25, 0x0F	; 15
 494:	01 97       	sbiw	r24, 0x01	; 1
 496:	f1 f7       	brne	.-4      	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
 498:	00 c0       	rjmp	.+0      	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
 49a:	00 00       	nop
 49c:	cf 91       	pop	r28
 49e:	08 95       	ret

000004a0 <LCD_displayString>:
 4a0:	cf 93       	push	r28
 4a2:	df 93       	push	r29
 4a4:	ec 01       	movw	r28, r24
 4a6:	03 c0       	rjmp	.+6      	; 0x4ae <LCD_displayString+0xe>
 4a8:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_displayCharacter>
 4ac:	21 96       	adiw	r28, 0x01	; 1
 4ae:	88 81       	ld	r24, Y
 4b0:	81 11       	cpse	r24, r1
 4b2:	fa cf       	rjmp	.-12     	; 0x4a8 <LCD_displayString+0x8>
 4b4:	df 91       	pop	r29
 4b6:	cf 91       	pop	r28
 4b8:	08 95       	ret

000004ba <LCD_moveCursor>:
 4ba:	81 30       	cpi	r24, 0x01	; 1
 4bc:	31 f0       	breq	.+12     	; 0x4ca <LCD_moveCursor+0x10>
 4be:	70 f0       	brcs	.+28     	; 0x4dc <LCD_moveCursor+0x22>
 4c0:	82 30       	cpi	r24, 0x02	; 2
 4c2:	31 f0       	breq	.+12     	; 0x4d0 <LCD_moveCursor+0x16>
 4c4:	83 30       	cpi	r24, 0x03	; 3
 4c6:	39 f0       	breq	.+14     	; 0x4d6 <LCD_moveCursor+0x1c>
 4c8:	0a c0       	rjmp	.+20     	; 0x4de <LCD_moveCursor+0x24>
 4ca:	90 e4       	ldi	r25, 0x40	; 64
 4cc:	96 0f       	add	r25, r22
 4ce:	07 c0       	rjmp	.+14     	; 0x4de <LCD_moveCursor+0x24>
 4d0:	90 e1       	ldi	r25, 0x10	; 16
 4d2:	96 0f       	add	r25, r22
 4d4:	04 c0       	rjmp	.+8      	; 0x4de <LCD_moveCursor+0x24>
 4d6:	90 e5       	ldi	r25, 0x50	; 80
 4d8:	96 0f       	add	r25, r22
 4da:	01 c0       	rjmp	.+2      	; 0x4de <LCD_moveCursor+0x24>
 4dc:	96 2f       	mov	r25, r22
 4de:	89 2f       	mov	r24, r25
 4e0:	80 68       	ori	r24, 0x80	; 128
 4e2:	0e 94 cc 00 	call	0x198	; 0x198 <LCD_sendCommand>
 4e6:	08 95       	ret

000004e8 <LCD_intgerToString>:


void LCD_intgerToString(int data)
{
 4e8:	cf 93       	push	r28
 4ea:	df 93       	push	r29
 4ec:	cd b7       	in	r28, 0x3d	; 61
 4ee:	de b7       	in	r29, 0x3e	; 62
 4f0:	60 97       	sbiw	r28, 0x10	; 16
 4f2:	0f b6       	in	r0, 0x3f	; 63
 4f4:	f8 94       	cli
 4f6:	de bf       	out	0x3e, r29	; 62
 4f8:	0f be       	out	0x3f, r0	; 63
 4fa:	cd bf       	out	0x3d, r28	; 61
	char buff[16]; /* String to hold the ascii result */
	itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
 4fc:	4a e0       	ldi	r20, 0x0A	; 10
 4fe:	50 e0       	ldi	r21, 0x00	; 0
 500:	be 01       	movw	r22, r28
 502:	6f 5f       	subi	r22, 0xFF	; 255
 504:	7f 4f       	sbci	r23, 0xFF	; 255
 506:	0e 94 22 05 	call	0xa44	; 0xa44 <itoa>
	LCD_displayString(buff); /* Display the string */
 50a:	ce 01       	movw	r24, r28
 50c:	01 96       	adiw	r24, 0x01	; 1
 50e:	0e 94 50 02 	call	0x4a0	; 0x4a0 <LCD_displayString>
}
 512:	60 96       	adiw	r28, 0x10	; 16
 514:	0f b6       	in	r0, 0x3f	; 63
 516:	f8 94       	cli
 518:	de bf       	out	0x3e, r29	; 62
 51a:	0f be       	out	0x3f, r0	; 63
 51c:	cd bf       	out	0x3d, r28	; 61
 51e:	df 91       	pop	r29
 520:	cf 91       	pop	r28
 522:	08 95       	ret

00000524 <ADC_init>:
#include "../Common_Macros.h"

void ADC_init(void)
{
	/*disable ADC*/
	CLEAR_BIT(ADCSRA,ADEN);
 524:	86 b1       	in	r24, 0x06	; 6
 526:	8f 77       	andi	r24, 0x7F	; 127
 528:	86 b9       	out	0x06, r24	; 6
	
	/*use AVCC*/
	SET_BIT(ADMUX,REFS0);
 52a:	87 b1       	in	r24, 0x07	; 7
 52c:	80 64       	ori	r24, 0x40	; 64
 52e:	87 b9       	out	0x07, r24	; 7
	CLEAR_BIT(ADMUX,REFS1);
 530:	87 b1       	in	r24, 0x07	; 7
 532:	8f 77       	andi	r24, 0x7F	; 127
 534:	87 b9       	out	0x07, r24	; 7
	
	/*Right adjustment*/
	CLEAR_BIT(ADMUX,REFS1);
 536:	87 b1       	in	r24, 0x07	; 7
 538:	8f 77       	andi	r24, 0x7F	; 127
 53a:	87 b9       	out	0x07, r24	; 7
	
	/*Select Prescaler 128*/
	SET_BIT(ADCSRA,ADPS0);
 53c:	86 b1       	in	r24, 0x06	; 6
 53e:	81 60       	ori	r24, 0x01	; 1
 540:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA,ADPS1);
 542:	86 b1       	in	r24, 0x06	; 6
 544:	82 60       	ori	r24, 0x02	; 2
 546:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA,ADPS2);
 548:	86 b1       	in	r24, 0x06	; 6
 54a:	84 60       	ori	r24, 0x04	; 4
 54c:	86 b9       	out	0x06, r24	; 6
	
	/*Disable ADC Interrupts*/
	CLEAR_BIT(ADCSRA,ADIE);
 54e:	86 b1       	in	r24, 0x06	; 6
 550:	87 7f       	andi	r24, 0xF7	; 247
 552:	86 b9       	out	0x06, r24	; 6
	
	/*disable auto triggering*/
	CLEAR_BIT(ADCSRA,ADATE);
 554:	86 b1       	in	r24, 0x06	; 6
 556:	8f 7d       	andi	r24, 0xDF	; 223
 558:	86 b9       	out	0x06, r24	; 6
	
	/*clear the source of auto triggering*/
	CLEAR_BIT(SFIOR,ADTS0);
 55a:	80 b7       	in	r24, 0x30	; 48
 55c:	8f 7d       	andi	r24, 0xDF	; 223
 55e:	80 bf       	out	0x30, r24	; 48
	CLEAR_BIT(SFIOR,ADTS1);
 560:	80 b7       	in	r24, 0x30	; 48
 562:	8f 7b       	andi	r24, 0xBF	; 191
 564:	80 bf       	out	0x30, r24	; 48
	CLEAR_BIT(SFIOR,ADTS2);
 566:	80 b7       	in	r24, 0x30	; 48
 568:	8f 77       	andi	r24, 0x7F	; 127
 56a:	80 bf       	out	0x30, r24	; 48
		//
	///*clear start conversion*/
	//CLEAR_BIT(ADCSRA,ADSC);
	
	/*Clear flag*/
	SET_BIT(ADCSRA,ADIF);
 56c:	86 b1       	in	r24, 0x06	; 6
 56e:	80 61       	ori	r24, 0x10	; 16
 570:	86 b9       	out	0x06, r24	; 6
	
	/*enable ADC*/
	SET_BIT(ADCSRA,ADEN);
 572:	86 b1       	in	r24, 0x06	; 6
 574:	80 68       	ori	r24, 0x80	; 128
 576:	86 b9       	out	0x06, r24	; 6
 578:	08 95       	ret

0000057a <ADC_readChannel>:
}

void ADC_readChannel(uint8 CH_num, uint16* ptr)
{
	/*initialize channel to 0*/
	ADMUX |= ((ADMUX & 0xE0) | (CH_num & 0x07)); 
 57a:	27 b1       	in	r18, 0x07	; 7
 57c:	97 b1       	in	r25, 0x07	; 7
 57e:	20 7e       	andi	r18, 0xE0	; 224
 580:	87 70       	andi	r24, 0x07	; 7
 582:	82 2b       	or	r24, r18
 584:	98 2b       	or	r25, r24
 586:	97 b9       	out	0x07, r25	; 7
	
	/*Start Conversion*/
	SET_BIT(ADCSRA,ADSC);
 588:	86 b1       	in	r24, 0x06	; 6
 58a:	80 64       	ori	r24, 0x40	; 64
 58c:	86 b9       	out	0x06, r24	; 6
		
	/*wait for flag*/
	while(BIT_IS_CLEAR(ADCSRA,ADIF));
 58e:	34 9b       	sbis	0x06, 4	; 6
 590:	fe cf       	rjmp	.-4      	; 0x58e <ADC_readChannel+0x14>
		
	/*clear flag*/
	SET_BIT(ADCSRA,ADIF);
 592:	86 b1       	in	r24, 0x06	; 6
 594:	80 61       	ori	r24, 0x10	; 16
 596:	86 b9       	out	0x06, r24	; 6
	
	/*save the data*/
	*ptr = ADC;
 598:	84 b1       	in	r24, 0x04	; 4
 59a:	95 b1       	in	r25, 0x05	; 5
 59c:	fb 01       	movw	r30, r22
 59e:	91 83       	std	Z+1, r25	; 0x01
 5a0:	80 83       	st	Z, r24
 5a2:	08 95       	ret

000005a4 <ADC_autotrigger_init>:
}

void ADC_autotrigger_init(void)
{
	/*disable ADC*/
	CLEAR_BIT(ADCSRA,ADEN);
 5a4:	86 b1       	in	r24, 0x06	; 6
 5a6:	8f 77       	andi	r24, 0x7F	; 127
 5a8:	86 b9       	out	0x06, r24	; 6
	
	/*use AVCC*/
	SET_BIT(ADMUX,REFS0);
 5aa:	87 b1       	in	r24, 0x07	; 7
 5ac:	80 64       	ori	r24, 0x40	; 64
 5ae:	87 b9       	out	0x07, r24	; 7
	CLEAR_BIT(ADMUX,REFS1);
 5b0:	87 b1       	in	r24, 0x07	; 7
 5b2:	8f 77       	andi	r24, 0x7F	; 127
 5b4:	87 b9       	out	0x07, r24	; 7
	
	/*Right adjustment*/
	CLEAR_BIT(ADMUX,REFS1);
 5b6:	87 b1       	in	r24, 0x07	; 7
 5b8:	8f 77       	andi	r24, 0x7F	; 127
 5ba:	87 b9       	out	0x07, r24	; 7
	
	/*Select Prescaler 128*/
	SET_BIT(ADCSRA,ADPS0);
 5bc:	86 b1       	in	r24, 0x06	; 6
 5be:	81 60       	ori	r24, 0x01	; 1
 5c0:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA,ADPS1);
 5c2:	86 b1       	in	r24, 0x06	; 6
 5c4:	82 60       	ori	r24, 0x02	; 2
 5c6:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA,ADPS2);
 5c8:	86 b1       	in	r24, 0x06	; 6
 5ca:	84 60       	ori	r24, 0x04	; 4
 5cc:	86 b9       	out	0x06, r24	; 6
	
	/*Disable ADC Interrupts*/
	CLEAR_BIT(ADCSRA,ADIE);
 5ce:	86 b1       	in	r24, 0x06	; 6
 5d0:	87 7f       	andi	r24, 0xF7	; 247
 5d2:	86 b9       	out	0x06, r24	; 6
	
	/*enable auto triggering*/
	SET_BIT(ADCSRA,ADATE);
 5d4:	86 b1       	in	r24, 0x06	; 6
 5d6:	80 62       	ori	r24, 0x20	; 32
 5d8:	86 b9       	out	0x06, r24	; 6
	
	/*specify the source of auto triggering*/
	CLEAR_BIT(SFIOR,ADTS0);
 5da:	80 b7       	in	r24, 0x30	; 48
 5dc:	8f 7d       	andi	r24, 0xDF	; 223
 5de:	80 bf       	out	0x30, r24	; 48
	SET_BIT(SFIOR,ADTS1);
 5e0:	80 b7       	in	r24, 0x30	; 48
 5e2:	80 64       	ori	r24, 0x40	; 64
 5e4:	80 bf       	out	0x30, r24	; 48
	CLEAR_BIT(SFIOR,ADTS2);
 5e6:	80 b7       	in	r24, 0x30	; 48
 5e8:	8f 77       	andi	r24, 0x7F	; 127
 5ea:	80 bf       	out	0x30, r24	; 48
	
	/*clear start conversion*/
	CLEAR_BIT(ADCSRA,ADSC);
 5ec:	86 b1       	in	r24, 0x06	; 6
 5ee:	8f 7b       	andi	r24, 0xBF	; 191
 5f0:	86 b9       	out	0x06, r24	; 6
	
	/*Clear flag*/
	SET_BIT(ADCSRA,ADIF);
 5f2:	86 b1       	in	r24, 0x06	; 6
 5f4:	80 61       	ori	r24, 0x10	; 16
 5f6:	86 b9       	out	0x06, r24	; 6
	
	/*enable ADC*/
	SET_BIT(ADCSRA,ADEN);
 5f8:	86 b1       	in	r24, 0x06	; 6
 5fa:	80 68       	ori	r24, 0x80	; 128
 5fc:	86 b9       	out	0x06, r24	; 6
 5fe:	08 95       	ret

00000600 <ADC_autotrigger_readChannel>:
}

void ADC_autotrigger_readChannel(uint8 CH_num, uint16* ptr)
{
	/*initialize channel to 0*/
	ADMUX |= ((ADMUX & 0xE0) | (CH_num & 0x07));
 600:	27 b1       	in	r18, 0x07	; 7
 602:	97 b1       	in	r25, 0x07	; 7
 604:	20 7e       	andi	r18, 0xE0	; 224
 606:	87 70       	andi	r24, 0x07	; 7
 608:	82 2b       	or	r24, r18
 60a:	98 2b       	or	r25, r24
 60c:	97 b9       	out	0x07, r25	; 7
	
	/*wait for flag*/
	while(BIT_IS_CLEAR(ADCSRA,ADIF));
 60e:	34 9b       	sbis	0x06, 4	; 6
 610:	fe cf       	rjmp	.-4      	; 0x60e <ADC_autotrigger_readChannel+0xe>
	
	/*clear flag*/
	SET_BIT(ADCSRA,ADIF);
 612:	86 b1       	in	r24, 0x06	; 6
 614:	80 61       	ori	r24, 0x10	; 16
 616:	86 b9       	out	0x06, r24	; 6
	
	/*save the data*/
	*ptr = ADC;
 618:	84 b1       	in	r24, 0x04	; 4
 61a:	95 b1       	in	r25, 0x05	; 5
 61c:	fb 01       	movw	r30, r22
 61e:	91 83       	std	Z+1, r25	; 0x01
 620:	80 83       	st	Z, r24
 622:	08 95       	ret

00000624 <DIO_voidSetPinDirection>:
	}
}

void DIO_voidSetPinDirection(uint8 copy_u8PortID,uint8 copy_u8PinID, uint8 copy_u8PinDir)
{
	switch(copy_u8PortID)
 624:	81 30       	cpi	r24, 0x01	; 1
 626:	01 f1       	breq	.+64     	; 0x668 <DIO_voidSetPinDirection+0x44>
 628:	30 f0       	brcs	.+12     	; 0x636 <DIO_voidSetPinDirection+0x12>
 62a:	82 30       	cpi	r24, 0x02	; 2
 62c:	b1 f1       	breq	.+108    	; 0x69a <DIO_voidSetPinDirection+0x76>
 62e:	83 30       	cpi	r24, 0x03	; 3
 630:	09 f4       	brne	.+2      	; 0x634 <DIO_voidSetPinDirection+0x10>
 632:	4c c0       	rjmp	.+152    	; 0x6cc <DIO_voidSetPinDirection+0xa8>
 634:	08 95       	ret
	{
		case PORTA_ID:
		if(copy_u8PinDir == OUTPUT_PIN)
 636:	41 30       	cpi	r20, 0x01	; 1
 638:	59 f4       	brne	.+22     	; 0x650 <DIO_voidSetPinDirection+0x2c>
		{
			SET_BIT(DDRA,copy_u8PinID);
 63a:	2a b3       	in	r18, 0x1a	; 26
 63c:	81 e0       	ldi	r24, 0x01	; 1
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	02 c0       	rjmp	.+4      	; 0x646 <DIO_voidSetPinDirection+0x22>
 642:	88 0f       	add	r24, r24
 644:	99 1f       	adc	r25, r25
 646:	6a 95       	dec	r22
 648:	e2 f7       	brpl	.-8      	; 0x642 <DIO_voidSetPinDirection+0x1e>
 64a:	82 2b       	or	r24, r18
 64c:	8a bb       	out	0x1a, r24	; 26
 64e:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRA,copy_u8PinID);
 650:	2a b3       	in	r18, 0x1a	; 26
 652:	81 e0       	ldi	r24, 0x01	; 1
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	02 c0       	rjmp	.+4      	; 0x65c <DIO_voidSetPinDirection+0x38>
 658:	88 0f       	add	r24, r24
 65a:	99 1f       	adc	r25, r25
 65c:	6a 95       	dec	r22
 65e:	e2 f7       	brpl	.-8      	; 0x658 <DIO_voidSetPinDirection+0x34>
 660:	80 95       	com	r24
 662:	82 23       	and	r24, r18
 664:	8a bb       	out	0x1a, r24	; 26
 666:	08 95       	ret
		}
		break;
		
		case PORTB_ID:
		if(copy_u8PinDir == OUTPUT_PIN)
 668:	41 30       	cpi	r20, 0x01	; 1
 66a:	59 f4       	brne	.+22     	; 0x682 <DIO_voidSetPinDirection+0x5e>
		{
			SET_BIT(DDRB,copy_u8PinID);
 66c:	27 b3       	in	r18, 0x17	; 23
 66e:	81 e0       	ldi	r24, 0x01	; 1
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	02 c0       	rjmp	.+4      	; 0x678 <DIO_voidSetPinDirection+0x54>
 674:	88 0f       	add	r24, r24
 676:	99 1f       	adc	r25, r25
 678:	6a 95       	dec	r22
 67a:	e2 f7       	brpl	.-8      	; 0x674 <DIO_voidSetPinDirection+0x50>
 67c:	82 2b       	or	r24, r18
 67e:	87 bb       	out	0x17, r24	; 23
 680:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRB,copy_u8PinID);
 682:	27 b3       	in	r18, 0x17	; 23
 684:	81 e0       	ldi	r24, 0x01	; 1
 686:	90 e0       	ldi	r25, 0x00	; 0
 688:	02 c0       	rjmp	.+4      	; 0x68e <DIO_voidSetPinDirection+0x6a>
 68a:	88 0f       	add	r24, r24
 68c:	99 1f       	adc	r25, r25
 68e:	6a 95       	dec	r22
 690:	e2 f7       	brpl	.-8      	; 0x68a <DIO_voidSetPinDirection+0x66>
 692:	80 95       	com	r24
 694:	82 23       	and	r24, r18
 696:	87 bb       	out	0x17, r24	; 23
 698:	08 95       	ret
		}
		break;
		
		case PORTC_ID:
		if(copy_u8PinDir == OUTPUT_PIN)
 69a:	41 30       	cpi	r20, 0x01	; 1
 69c:	59 f4       	brne	.+22     	; 0x6b4 <DIO_voidSetPinDirection+0x90>
		{
			SET_BIT(DDRC,copy_u8PinID);
 69e:	24 b3       	in	r18, 0x14	; 20
 6a0:	81 e0       	ldi	r24, 0x01	; 1
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	02 c0       	rjmp	.+4      	; 0x6aa <DIO_voidSetPinDirection+0x86>
 6a6:	88 0f       	add	r24, r24
 6a8:	99 1f       	adc	r25, r25
 6aa:	6a 95       	dec	r22
 6ac:	e2 f7       	brpl	.-8      	; 0x6a6 <DIO_voidSetPinDirection+0x82>
 6ae:	82 2b       	or	r24, r18
 6b0:	84 bb       	out	0x14, r24	; 20
 6b2:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRC,copy_u8PinID);
 6b4:	24 b3       	in	r18, 0x14	; 20
 6b6:	81 e0       	ldi	r24, 0x01	; 1
 6b8:	90 e0       	ldi	r25, 0x00	; 0
 6ba:	02 c0       	rjmp	.+4      	; 0x6c0 <DIO_voidSetPinDirection+0x9c>
 6bc:	88 0f       	add	r24, r24
 6be:	99 1f       	adc	r25, r25
 6c0:	6a 95       	dec	r22
 6c2:	e2 f7       	brpl	.-8      	; 0x6bc <DIO_voidSetPinDirection+0x98>
 6c4:	80 95       	com	r24
 6c6:	82 23       	and	r24, r18
 6c8:	84 bb       	out	0x14, r24	; 20
 6ca:	08 95       	ret
		}
		break;
		
		case PORTD_ID:
		if(copy_u8PinDir == OUTPUT_PIN)
 6cc:	41 30       	cpi	r20, 0x01	; 1
 6ce:	59 f4       	brne	.+22     	; 0x6e6 <DIO_voidSetPinDirection+0xc2>
		{
			SET_BIT(DDRD,copy_u8PinID);
 6d0:	21 b3       	in	r18, 0x11	; 17
 6d2:	81 e0       	ldi	r24, 0x01	; 1
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	02 c0       	rjmp	.+4      	; 0x6dc <DIO_voidSetPinDirection+0xb8>
 6d8:	88 0f       	add	r24, r24
 6da:	99 1f       	adc	r25, r25
 6dc:	6a 95       	dec	r22
 6de:	e2 f7       	brpl	.-8      	; 0x6d8 <DIO_voidSetPinDirection+0xb4>
 6e0:	82 2b       	or	r24, r18
 6e2:	81 bb       	out	0x11, r24	; 17
 6e4:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRD,copy_u8PinID);
 6e6:	21 b3       	in	r18, 0x11	; 17
 6e8:	81 e0       	ldi	r24, 0x01	; 1
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	02 c0       	rjmp	.+4      	; 0x6f2 <DIO_voidSetPinDirection+0xce>
 6ee:	88 0f       	add	r24, r24
 6f0:	99 1f       	adc	r25, r25
 6f2:	6a 95       	dec	r22
 6f4:	e2 f7       	brpl	.-8      	; 0x6ee <DIO_voidSetPinDirection+0xca>
 6f6:	80 95       	com	r24
 6f8:	82 23       	and	r24, r18
 6fa:	81 bb       	out	0x11, r24	; 17
 6fc:	08 95       	ret

000006fe <DIO_voidSetPinValue>:
		
	}
}
void DIO_voidSetPinValue(uint8 copy_u8PortID,uint8 copy_u8PinID, uint8 copy_u8PinValue)
{
	switch(copy_u8PortID)
 6fe:	81 30       	cpi	r24, 0x01	; 1
 700:	01 f1       	breq	.+64     	; 0x742 <DIO_voidSetPinValue+0x44>
 702:	30 f0       	brcs	.+12     	; 0x710 <DIO_voidSetPinValue+0x12>
 704:	82 30       	cpi	r24, 0x02	; 2
 706:	b1 f1       	breq	.+108    	; 0x774 <DIO_voidSetPinValue+0x76>
 708:	83 30       	cpi	r24, 0x03	; 3
 70a:	09 f4       	brne	.+2      	; 0x70e <DIO_voidSetPinValue+0x10>
 70c:	4c c0       	rjmp	.+152    	; 0x7a6 <DIO_voidSetPinValue+0xa8>
 70e:	08 95       	ret
	{
		case PORTA_ID:
		if(copy_u8PinValue == LOGIC_HIGH)
 710:	41 30       	cpi	r20, 0x01	; 1
 712:	59 f4       	brne	.+22     	; 0x72a <DIO_voidSetPinValue+0x2c>
		{
			SET_BIT(PORTA,copy_u8PinID);
 714:	2b b3       	in	r18, 0x1b	; 27
 716:	81 e0       	ldi	r24, 0x01	; 1
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	02 c0       	rjmp	.+4      	; 0x720 <DIO_voidSetPinValue+0x22>
 71c:	88 0f       	add	r24, r24
 71e:	99 1f       	adc	r25, r25
 720:	6a 95       	dec	r22
 722:	e2 f7       	brpl	.-8      	; 0x71c <DIO_voidSetPinValue+0x1e>
 724:	82 2b       	or	r24, r18
 726:	8b bb       	out	0x1b, r24	; 27
 728:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTA,copy_u8PinID);
 72a:	2b b3       	in	r18, 0x1b	; 27
 72c:	81 e0       	ldi	r24, 0x01	; 1
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	02 c0       	rjmp	.+4      	; 0x736 <DIO_voidSetPinValue+0x38>
 732:	88 0f       	add	r24, r24
 734:	99 1f       	adc	r25, r25
 736:	6a 95       	dec	r22
 738:	e2 f7       	brpl	.-8      	; 0x732 <DIO_voidSetPinValue+0x34>
 73a:	80 95       	com	r24
 73c:	82 23       	and	r24, r18
 73e:	8b bb       	out	0x1b, r24	; 27
 740:	08 95       	ret
		}
		break;
		
		case PORTB_ID:
		if(copy_u8PinValue == LOGIC_HIGH)
 742:	41 30       	cpi	r20, 0x01	; 1
 744:	59 f4       	brne	.+22     	; 0x75c <DIO_voidSetPinValue+0x5e>
		{
			SET_BIT(PORTB,copy_u8PinID);
 746:	28 b3       	in	r18, 0x18	; 24
 748:	81 e0       	ldi	r24, 0x01	; 1
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	02 c0       	rjmp	.+4      	; 0x752 <DIO_voidSetPinValue+0x54>
 74e:	88 0f       	add	r24, r24
 750:	99 1f       	adc	r25, r25
 752:	6a 95       	dec	r22
 754:	e2 f7       	brpl	.-8      	; 0x74e <DIO_voidSetPinValue+0x50>
 756:	82 2b       	or	r24, r18
 758:	88 bb       	out	0x18, r24	; 24
 75a:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTB,copy_u8PinID);
 75c:	28 b3       	in	r18, 0x18	; 24
 75e:	81 e0       	ldi	r24, 0x01	; 1
 760:	90 e0       	ldi	r25, 0x00	; 0
 762:	02 c0       	rjmp	.+4      	; 0x768 <DIO_voidSetPinValue+0x6a>
 764:	88 0f       	add	r24, r24
 766:	99 1f       	adc	r25, r25
 768:	6a 95       	dec	r22
 76a:	e2 f7       	brpl	.-8      	; 0x764 <DIO_voidSetPinValue+0x66>
 76c:	80 95       	com	r24
 76e:	82 23       	and	r24, r18
 770:	88 bb       	out	0x18, r24	; 24
 772:	08 95       	ret
		}
		break;
		
		case PORTC_ID:
		if(copy_u8PinValue == LOGIC_HIGH)
 774:	41 30       	cpi	r20, 0x01	; 1
 776:	59 f4       	brne	.+22     	; 0x78e <DIO_voidSetPinValue+0x90>
		{
			SET_BIT(PORTC,copy_u8PinID);
 778:	25 b3       	in	r18, 0x15	; 21
 77a:	81 e0       	ldi	r24, 0x01	; 1
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	02 c0       	rjmp	.+4      	; 0x784 <DIO_voidSetPinValue+0x86>
 780:	88 0f       	add	r24, r24
 782:	99 1f       	adc	r25, r25
 784:	6a 95       	dec	r22
 786:	e2 f7       	brpl	.-8      	; 0x780 <DIO_voidSetPinValue+0x82>
 788:	82 2b       	or	r24, r18
 78a:	85 bb       	out	0x15, r24	; 21
 78c:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTC,copy_u8PinID);
 78e:	25 b3       	in	r18, 0x15	; 21
 790:	81 e0       	ldi	r24, 0x01	; 1
 792:	90 e0       	ldi	r25, 0x00	; 0
 794:	02 c0       	rjmp	.+4      	; 0x79a <DIO_voidSetPinValue+0x9c>
 796:	88 0f       	add	r24, r24
 798:	99 1f       	adc	r25, r25
 79a:	6a 95       	dec	r22
 79c:	e2 f7       	brpl	.-8      	; 0x796 <DIO_voidSetPinValue+0x98>
 79e:	80 95       	com	r24
 7a0:	82 23       	and	r24, r18
 7a2:	85 bb       	out	0x15, r24	; 21
 7a4:	08 95       	ret
		}
		break;
		
		case PORTD_ID:
		if(copy_u8PinValue == LOGIC_HIGH)
 7a6:	41 30       	cpi	r20, 0x01	; 1
 7a8:	59 f4       	brne	.+22     	; 0x7c0 <DIO_voidSetPinValue+0xc2>
		{
			SET_BIT(PORTD,copy_u8PinID);
 7aa:	22 b3       	in	r18, 0x12	; 18
 7ac:	81 e0       	ldi	r24, 0x01	; 1
 7ae:	90 e0       	ldi	r25, 0x00	; 0
 7b0:	02 c0       	rjmp	.+4      	; 0x7b6 <DIO_voidSetPinValue+0xb8>
 7b2:	88 0f       	add	r24, r24
 7b4:	99 1f       	adc	r25, r25
 7b6:	6a 95       	dec	r22
 7b8:	e2 f7       	brpl	.-8      	; 0x7b2 <DIO_voidSetPinValue+0xb4>
 7ba:	82 2b       	or	r24, r18
 7bc:	82 bb       	out	0x12, r24	; 18
 7be:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTD,copy_u8PinID);
 7c0:	22 b3       	in	r18, 0x12	; 18
 7c2:	81 e0       	ldi	r24, 0x01	; 1
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	02 c0       	rjmp	.+4      	; 0x7cc <DIO_voidSetPinValue+0xce>
 7c8:	88 0f       	add	r24, r24
 7ca:	99 1f       	adc	r25, r25
 7cc:	6a 95       	dec	r22
 7ce:	e2 f7       	brpl	.-8      	; 0x7c8 <DIO_voidSetPinValue+0xca>
 7d0:	80 95       	com	r24
 7d2:	82 23       	and	r24, r18
 7d4:	82 bb       	out	0x12, r24	; 18
 7d6:	08 95       	ret

000007d8 <EXT_init>:
void (*EXT1_ptr)(void);
void (*EXT2_ptr)(void);


void EXT_init(uint8 EXT_num, uint8 EXT_sense)
{
 7d8:	cf 93       	push	r28
 7da:	c6 2f       	mov	r28, r22
	switch(EXT_num)
 7dc:	81 30       	cpi	r24, 0x01	; 1
 7de:	89 f1       	breq	.+98     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 7e0:	20 f0       	brcs	.+8      	; 0x7ea <EXT_init+0x12>
 7e2:	82 30       	cpi	r24, 0x02	; 2
 7e4:	09 f4       	brne	.+2      	; 0x7e8 <EXT_init+0x10>
 7e6:	59 c0       	rjmp	.+178    	; 0x89a <__stack+0x3b>
 7e8:	6c c0       	rjmp	.+216    	; 0x8c2 <__stack+0x63>
	{
		case EXT_0:
		DIO_voidSetPinDirection(EXT_0_PORT_ID,EXT_0_PIN_ID,INPUT_PIN);
 7ea:	40 e0       	ldi	r20, 0x00	; 0
 7ec:	62 e0       	ldi	r22, 0x02	; 2
 7ee:	83 e0       	ldi	r24, 0x03	; 3
 7f0:	0e 94 12 03 	call	0x624	; 0x624 <DIO_voidSetPinDirection>
		SET_BIT(GICR,INT0_EN);
 7f4:	8b b7       	in	r24, 0x3b	; 59
 7f6:	80 64       	ori	r24, 0x40	; 64
 7f8:	8b bf       	out	0x3b, r24	; 59
		switch(EXT_sense)
 7fa:	c1 30       	cpi	r28, 0x01	; 1
 7fc:	69 f0       	breq	.+26     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 7fe:	28 f0       	brcs	.+10     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 800:	c2 30       	cpi	r28, 0x02	; 2
 802:	89 f0       	breq	.+34     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 804:	c3 30       	cpi	r28, 0x03	; 3
 806:	b1 f0       	breq	.+44     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 808:	5c c0       	rjmp	.+184    	; 0x8c2 <__stack+0x63>
		{
			case LOW_LEVEL:
			CLEAR_BIT(MCUCR,ISC00);
 80a:	85 b7       	in	r24, 0x35	; 53
 80c:	8e 7f       	andi	r24, 0xFE	; 254
 80e:	85 bf       	out	0x35, r24	; 53
			CLEAR_BIT(MCUCR,ISC01);
 810:	85 b7       	in	r24, 0x35	; 53
 812:	8d 7f       	andi	r24, 0xFD	; 253
 814:	85 bf       	out	0x35, r24	; 53
			break;
 816:	55 c0       	rjmp	.+170    	; 0x8c2 <__stack+0x63>
			case LOGICAL_CHANGE:
			SET_BIT(MCUCR,ISC00);
 818:	85 b7       	in	r24, 0x35	; 53
 81a:	81 60       	ori	r24, 0x01	; 1
 81c:	85 bf       	out	0x35, r24	; 53
			CLEAR_BIT(MCUCR,ISC01);
 81e:	85 b7       	in	r24, 0x35	; 53
 820:	8d 7f       	andi	r24, 0xFD	; 253
 822:	85 bf       	out	0x35, r24	; 53
			break;
 824:	4e c0       	rjmp	.+156    	; 0x8c2 <__stack+0x63>
			case FALLING:
			CLEAR_BIT(MCUCR,ISC00);
 826:	85 b7       	in	r24, 0x35	; 53
 828:	8e 7f       	andi	r24, 0xFE	; 254
 82a:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC01);
 82c:	85 b7       	in	r24, 0x35	; 53
 82e:	82 60       	ori	r24, 0x02	; 2
 830:	85 bf       	out	0x35, r24	; 53
			break;
 832:	47 c0       	rjmp	.+142    	; 0x8c2 <__stack+0x63>
			case RISING:
			SET_BIT(MCUCR,ISC00);
 834:	85 b7       	in	r24, 0x35	; 53
 836:	81 60       	ori	r24, 0x01	; 1
 838:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC01);
 83a:	85 b7       	in	r24, 0x35	; 53
 83c:	82 60       	ori	r24, 0x02	; 2
 83e:	85 bf       	out	0x35, r24	; 53
			break;	
 840:	40 c0       	rjmp	.+128    	; 0x8c2 <__stack+0x63>
		}
		break;
	case EXT_1:
	DIO_voidSetPinDirection(EXT_1_PORT_ID,EXT_1_PIN_ID,INPUT_PIN);
 842:	40 e0       	ldi	r20, 0x00	; 0
 844:	63 e0       	ldi	r22, 0x03	; 3
 846:	83 e0       	ldi	r24, 0x03	; 3
 848:	0e 94 12 03 	call	0x624	; 0x624 <DIO_voidSetPinDirection>
	SET_BIT(GICR,INT1_EN);
 84c:	8b b7       	in	r24, 0x3b	; 59
 84e:	80 68       	ori	r24, 0x80	; 128
 850:	8b bf       	out	0x3b, r24	; 59
	switch(EXT_sense)
 852:	c1 30       	cpi	r28, 0x01	; 1
 854:	69 f0       	breq	.+26     	; 0x870 <__stack+0x11>
 856:	28 f0       	brcs	.+10     	; 0x862 <__stack+0x3>
 858:	c2 30       	cpi	r28, 0x02	; 2
 85a:	89 f0       	breq	.+34     	; 0x87e <__stack+0x1f>
 85c:	c3 30       	cpi	r28, 0x03	; 3
 85e:	b1 f0       	breq	.+44     	; 0x88c <__stack+0x2d>
 860:	30 c0       	rjmp	.+96     	; 0x8c2 <__stack+0x63>
	{
		case LOW_LEVEL:
		CLEAR_BIT(MCUCR,ISC10);
 862:	85 b7       	in	r24, 0x35	; 53
 864:	8b 7f       	andi	r24, 0xFB	; 251
 866:	85 bf       	out	0x35, r24	; 53
		CLEAR_BIT(MCUCR,ISC11);
 868:	85 b7       	in	r24, 0x35	; 53
 86a:	87 7f       	andi	r24, 0xF7	; 247
 86c:	85 bf       	out	0x35, r24	; 53
		break;
 86e:	29 c0       	rjmp	.+82     	; 0x8c2 <__stack+0x63>
		case LOGICAL_CHANGE:
		SET_BIT(MCUCR,ISC10);
 870:	85 b7       	in	r24, 0x35	; 53
 872:	84 60       	ori	r24, 0x04	; 4
 874:	85 bf       	out	0x35, r24	; 53
		CLEAR_BIT(MCUCR,ISC11);
 876:	85 b7       	in	r24, 0x35	; 53
 878:	87 7f       	andi	r24, 0xF7	; 247
 87a:	85 bf       	out	0x35, r24	; 53
		break;
 87c:	22 c0       	rjmp	.+68     	; 0x8c2 <__stack+0x63>
		case FALLING:
		CLEAR_BIT(MCUCR,ISC10);
 87e:	85 b7       	in	r24, 0x35	; 53
 880:	8b 7f       	andi	r24, 0xFB	; 251
 882:	85 bf       	out	0x35, r24	; 53
		SET_BIT(MCUCR,ISC11);
 884:	85 b7       	in	r24, 0x35	; 53
 886:	88 60       	ori	r24, 0x08	; 8
 888:	85 bf       	out	0x35, r24	; 53
		break;
 88a:	1b c0       	rjmp	.+54     	; 0x8c2 <__stack+0x63>
		case RISING:
		SET_BIT(MCUCR,ISC10);
 88c:	85 b7       	in	r24, 0x35	; 53
 88e:	84 60       	ori	r24, 0x04	; 4
 890:	85 bf       	out	0x35, r24	; 53
		SET_BIT(MCUCR,ISC11);
 892:	85 b7       	in	r24, 0x35	; 53
 894:	88 60       	ori	r24, 0x08	; 8
 896:	85 bf       	out	0x35, r24	; 53
		break;
 898:	14 c0       	rjmp	.+40     	; 0x8c2 <__stack+0x63>
	}
	break;
	case EXT_2:
	DIO_voidSetPinDirection(EXT_2_PORT_ID,EXT_2_PIN_ID,INPUT_PIN);
 89a:	40 e0       	ldi	r20, 0x00	; 0
 89c:	62 e0       	ldi	r22, 0x02	; 2
 89e:	81 e0       	ldi	r24, 0x01	; 1
 8a0:	0e 94 12 03 	call	0x624	; 0x624 <DIO_voidSetPinDirection>
	SET_BIT(GICR,INT2_EN);
 8a4:	8b b7       	in	r24, 0x3b	; 59
 8a6:	80 62       	ori	r24, 0x20	; 32
 8a8:	8b bf       	out	0x3b, r24	; 59
	switch(EXT_sense)
 8aa:	c2 30       	cpi	r28, 0x02	; 2
 8ac:	19 f0       	breq	.+6      	; 0x8b4 <__stack+0x55>
 8ae:	c3 30       	cpi	r28, 0x03	; 3
 8b0:	29 f0       	breq	.+10     	; 0x8bc <__stack+0x5d>
 8b2:	07 c0       	rjmp	.+14     	; 0x8c2 <__stack+0x63>
	{
		case FALLING:
		CLEAR_BIT(MCUCSR,ISC2);
 8b4:	84 b7       	in	r24, 0x34	; 52
 8b6:	8f 7b       	andi	r24, 0xBF	; 191
 8b8:	84 bf       	out	0x34, r24	; 52
		break;
 8ba:	03 c0       	rjmp	.+6      	; 0x8c2 <__stack+0x63>
		case RISING:
		SET_BIT(MCUCSR,ISC2);
 8bc:	84 b7       	in	r24, 0x34	; 52
 8be:	80 64       	ori	r24, 0x40	; 64
 8c0:	84 bf       	out	0x34, r24	; 52
		break;
	}
	break;
	}
}
 8c2:	cf 91       	pop	r28
 8c4:	08 95       	ret

000008c6 <EXT_callback>:

void EXT_callback(uint8 EXT_num, void (*ptr)(void))
{
	switch(EXT_num)
 8c6:	81 30       	cpi	r24, 0x01	; 1
 8c8:	49 f0       	breq	.+18     	; 0x8dc <EXT_callback+0x16>
 8ca:	18 f0       	brcs	.+6      	; 0x8d2 <EXT_callback+0xc>
 8cc:	82 30       	cpi	r24, 0x02	; 2
 8ce:	59 f0       	breq	.+22     	; 0x8e6 <EXT_callback+0x20>
 8d0:	08 95       	ret
	{
		case EXT_0:
		EXT0_ptr = ptr;
 8d2:	70 93 79 00 	sts	0x0079, r23	; 0x800079 <EXT0_ptr+0x1>
 8d6:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <EXT0_ptr>
		break;
 8da:	08 95       	ret
		case EXT_1:
		EXT1_ptr = ptr;
 8dc:	70 93 77 00 	sts	0x0077, r23	; 0x800077 <EXT1_ptr+0x1>
 8e0:	60 93 76 00 	sts	0x0076, r22	; 0x800076 <EXT1_ptr>
		break;
 8e4:	08 95       	ret
		case EXT_2:
		EXT2_ptr = ptr;
 8e6:	70 93 75 00 	sts	0x0075, r23	; 0x800075 <EXT2_ptr+0x1>
 8ea:	60 93 74 00 	sts	0x0074, r22	; 0x800074 <EXT2_ptr>
 8ee:	08 95       	ret

000008f0 <__vector_1>:
	}
}

void __vector_1()__attribute__((signal));
void __vector_1()
{
 8f0:	1f 92       	push	r1
 8f2:	0f 92       	push	r0
 8f4:	0f b6       	in	r0, 0x3f	; 63
 8f6:	0f 92       	push	r0
 8f8:	11 24       	eor	r1, r1
 8fa:	2f 93       	push	r18
 8fc:	3f 93       	push	r19
 8fe:	4f 93       	push	r20
 900:	5f 93       	push	r21
 902:	6f 93       	push	r22
 904:	7f 93       	push	r23
 906:	8f 93       	push	r24
 908:	9f 93       	push	r25
 90a:	af 93       	push	r26
 90c:	bf 93       	push	r27
 90e:	ef 93       	push	r30
 910:	ff 93       	push	r31
	EXT0_ptr();
 912:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <EXT0_ptr>
 916:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <EXT0_ptr+0x1>
 91a:	09 95       	icall
}
 91c:	ff 91       	pop	r31
 91e:	ef 91       	pop	r30
 920:	bf 91       	pop	r27
 922:	af 91       	pop	r26
 924:	9f 91       	pop	r25
 926:	8f 91       	pop	r24
 928:	7f 91       	pop	r23
 92a:	6f 91       	pop	r22
 92c:	5f 91       	pop	r21
 92e:	4f 91       	pop	r20
 930:	3f 91       	pop	r19
 932:	2f 91       	pop	r18
 934:	0f 90       	pop	r0
 936:	0f be       	out	0x3f, r0	; 63
 938:	0f 90       	pop	r0
 93a:	1f 90       	pop	r1
 93c:	18 95       	reti

0000093e <__vector_2>:

void __vector_2()__attribute__((signal));
void __vector_2()
{
 93e:	1f 92       	push	r1
 940:	0f 92       	push	r0
 942:	0f b6       	in	r0, 0x3f	; 63
 944:	0f 92       	push	r0
 946:	11 24       	eor	r1, r1
 948:	2f 93       	push	r18
 94a:	3f 93       	push	r19
 94c:	4f 93       	push	r20
 94e:	5f 93       	push	r21
 950:	6f 93       	push	r22
 952:	7f 93       	push	r23
 954:	8f 93       	push	r24
 956:	9f 93       	push	r25
 958:	af 93       	push	r26
 95a:	bf 93       	push	r27
 95c:	ef 93       	push	r30
 95e:	ff 93       	push	r31
	EXT1_ptr();
 960:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <EXT1_ptr>
 964:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <EXT1_ptr+0x1>
 968:	09 95       	icall
}
 96a:	ff 91       	pop	r31
 96c:	ef 91       	pop	r30
 96e:	bf 91       	pop	r27
 970:	af 91       	pop	r26
 972:	9f 91       	pop	r25
 974:	8f 91       	pop	r24
 976:	7f 91       	pop	r23
 978:	6f 91       	pop	r22
 97a:	5f 91       	pop	r21
 97c:	4f 91       	pop	r20
 97e:	3f 91       	pop	r19
 980:	2f 91       	pop	r18
 982:	0f 90       	pop	r0
 984:	0f be       	out	0x3f, r0	; 63
 986:	0f 90       	pop	r0
 988:	1f 90       	pop	r1
 98a:	18 95       	reti

0000098c <__vector_3>:

void __vector_3()__attribute__((signal));
void __vector_3()
{
 98c:	1f 92       	push	r1
 98e:	0f 92       	push	r0
 990:	0f b6       	in	r0, 0x3f	; 63
 992:	0f 92       	push	r0
 994:	11 24       	eor	r1, r1
 996:	2f 93       	push	r18
 998:	3f 93       	push	r19
 99a:	4f 93       	push	r20
 99c:	5f 93       	push	r21
 99e:	6f 93       	push	r22
 9a0:	7f 93       	push	r23
 9a2:	8f 93       	push	r24
 9a4:	9f 93       	push	r25
 9a6:	af 93       	push	r26
 9a8:	bf 93       	push	r27
 9aa:	ef 93       	push	r30
 9ac:	ff 93       	push	r31
	EXT2_ptr();
 9ae:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <EXT2_ptr>
 9b2:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <EXT2_ptr+0x1>
 9b6:	09 95       	icall
}
 9b8:	ff 91       	pop	r31
 9ba:	ef 91       	pop	r30
 9bc:	bf 91       	pop	r27
 9be:	af 91       	pop	r26
 9c0:	9f 91       	pop	r25
 9c2:	8f 91       	pop	r24
 9c4:	7f 91       	pop	r23
 9c6:	6f 91       	pop	r22
 9c8:	5f 91       	pop	r21
 9ca:	4f 91       	pop	r20
 9cc:	3f 91       	pop	r19
 9ce:	2f 91       	pop	r18
 9d0:	0f 90       	pop	r0
 9d2:	0f be       	out	0x3f, r0	; 63
 9d4:	0f 90       	pop	r0
 9d6:	1f 90       	pop	r1
 9d8:	18 95       	reti

000009da <GIE_enable>:
#include "../MCAL/GIE_interface.h"
#include "../Common_Macros.h"

void GIE_enable(void)
{
	SET_BIT(SREG,I_BIT);
 9da:	8f b7       	in	r24, 0x3f	; 63
 9dc:	80 68       	ori	r24, 0x80	; 128
 9de:	8f bf       	out	0x3f, r24	; 63
 9e0:	08 95       	ret

000009e2 <__udivmodsi4>:
 9e2:	a1 e2       	ldi	r26, 0x21	; 33
 9e4:	1a 2e       	mov	r1, r26
 9e6:	aa 1b       	sub	r26, r26
 9e8:	bb 1b       	sub	r27, r27
 9ea:	fd 01       	movw	r30, r26
 9ec:	0d c0       	rjmp	.+26     	; 0xa08 <__udivmodsi4_ep>

000009ee <__udivmodsi4_loop>:
 9ee:	aa 1f       	adc	r26, r26
 9f0:	bb 1f       	adc	r27, r27
 9f2:	ee 1f       	adc	r30, r30
 9f4:	ff 1f       	adc	r31, r31
 9f6:	a2 17       	cp	r26, r18
 9f8:	b3 07       	cpc	r27, r19
 9fa:	e4 07       	cpc	r30, r20
 9fc:	f5 07       	cpc	r31, r21
 9fe:	20 f0       	brcs	.+8      	; 0xa08 <__udivmodsi4_ep>
 a00:	a2 1b       	sub	r26, r18
 a02:	b3 0b       	sbc	r27, r19
 a04:	e4 0b       	sbc	r30, r20
 a06:	f5 0b       	sbc	r31, r21

00000a08 <__udivmodsi4_ep>:
 a08:	66 1f       	adc	r22, r22
 a0a:	77 1f       	adc	r23, r23
 a0c:	88 1f       	adc	r24, r24
 a0e:	99 1f       	adc	r25, r25
 a10:	1a 94       	dec	r1
 a12:	69 f7       	brne	.-38     	; 0x9ee <__udivmodsi4_loop>
 a14:	60 95       	com	r22
 a16:	70 95       	com	r23
 a18:	80 95       	com	r24
 a1a:	90 95       	com	r25
 a1c:	9b 01       	movw	r18, r22
 a1e:	ac 01       	movw	r20, r24
 a20:	bd 01       	movw	r22, r26
 a22:	cf 01       	movw	r24, r30
 a24:	08 95       	ret

00000a26 <__umulhisi3>:
 a26:	a2 9f       	mul	r26, r18
 a28:	b0 01       	movw	r22, r0
 a2a:	b3 9f       	mul	r27, r19
 a2c:	c0 01       	movw	r24, r0
 a2e:	a3 9f       	mul	r26, r19
 a30:	70 0d       	add	r23, r0
 a32:	81 1d       	adc	r24, r1
 a34:	11 24       	eor	r1, r1
 a36:	91 1d       	adc	r25, r1
 a38:	b2 9f       	mul	r27, r18
 a3a:	70 0d       	add	r23, r0
 a3c:	81 1d       	adc	r24, r1
 a3e:	11 24       	eor	r1, r1
 a40:	91 1d       	adc	r25, r1
 a42:	08 95       	ret

00000a44 <itoa>:
 a44:	45 32       	cpi	r20, 0x25	; 37
 a46:	51 05       	cpc	r21, r1
 a48:	20 f4       	brcc	.+8      	; 0xa52 <itoa+0xe>
 a4a:	42 30       	cpi	r20, 0x02	; 2
 a4c:	10 f0       	brcs	.+4      	; 0xa52 <itoa+0xe>
 a4e:	0c 94 2d 05 	jmp	0xa5a	; 0xa5a <__itoa_ncheck>
 a52:	fb 01       	movw	r30, r22
 a54:	10 82       	st	Z, r1
 a56:	cb 01       	movw	r24, r22
 a58:	08 95       	ret

00000a5a <__itoa_ncheck>:
 a5a:	bb 27       	eor	r27, r27
 a5c:	4a 30       	cpi	r20, 0x0A	; 10
 a5e:	31 f4       	brne	.+12     	; 0xa6c <__itoa_ncheck+0x12>
 a60:	99 23       	and	r25, r25
 a62:	22 f4       	brpl	.+8      	; 0xa6c <__itoa_ncheck+0x12>
 a64:	bd e2       	ldi	r27, 0x2D	; 45
 a66:	90 95       	com	r25
 a68:	81 95       	neg	r24
 a6a:	9f 4f       	sbci	r25, 0xFF	; 255
 a6c:	0c 94 39 05 	jmp	0xa72	; 0xa72 <__utoa_common>

00000a70 <__utoa_ncheck>:
 a70:	bb 27       	eor	r27, r27

00000a72 <__utoa_common>:
 a72:	fb 01       	movw	r30, r22
 a74:	55 27       	eor	r21, r21
 a76:	aa 27       	eor	r26, r26
 a78:	88 0f       	add	r24, r24
 a7a:	99 1f       	adc	r25, r25
 a7c:	aa 1f       	adc	r26, r26
 a7e:	a4 17       	cp	r26, r20
 a80:	10 f0       	brcs	.+4      	; 0xa86 <__utoa_common+0x14>
 a82:	a4 1b       	sub	r26, r20
 a84:	83 95       	inc	r24
 a86:	50 51       	subi	r21, 0x10	; 16
 a88:	b9 f7       	brne	.-18     	; 0xa78 <__utoa_common+0x6>
 a8a:	a0 5d       	subi	r26, 0xD0	; 208
 a8c:	aa 33       	cpi	r26, 0x3A	; 58
 a8e:	08 f0       	brcs	.+2      	; 0xa92 <__utoa_common+0x20>
 a90:	a9 5d       	subi	r26, 0xD9	; 217
 a92:	a1 93       	st	Z+, r26
 a94:	00 97       	sbiw	r24, 0x00	; 0
 a96:	79 f7       	brne	.-34     	; 0xa76 <__utoa_common+0x4>
 a98:	b1 11       	cpse	r27, r1
 a9a:	b1 93       	st	Z+, r27
 a9c:	11 92       	st	Z+, r1
 a9e:	cb 01       	movw	r24, r22
 aa0:	0c 94 52 05 	jmp	0xaa4	; 0xaa4 <strrev>

00000aa4 <strrev>:
 aa4:	dc 01       	movw	r26, r24
 aa6:	fc 01       	movw	r30, r24
 aa8:	67 2f       	mov	r22, r23
 aaa:	71 91       	ld	r23, Z+
 aac:	77 23       	and	r23, r23
 aae:	e1 f7       	brne	.-8      	; 0xaa8 <strrev+0x4>
 ab0:	32 97       	sbiw	r30, 0x02	; 2
 ab2:	04 c0       	rjmp	.+8      	; 0xabc <strrev+0x18>
 ab4:	7c 91       	ld	r23, X
 ab6:	6d 93       	st	X+, r22
 ab8:	70 83       	st	Z, r23
 aba:	62 91       	ld	r22, -Z
 abc:	ae 17       	cp	r26, r30
 abe:	bf 07       	cpc	r27, r31
 ac0:	c8 f3       	brcs	.-14     	; 0xab4 <strrev+0x10>
 ac2:	08 95       	ret

00000ac4 <_exit>:
 ac4:	f8 94       	cli

00000ac6 <__stop_program>:
 ac6:	ff cf       	rjmp	.-2      	; 0xac6 <__stop_program>
