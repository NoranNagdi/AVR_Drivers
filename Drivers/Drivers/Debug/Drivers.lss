
Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000984  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000984  00000a18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800068  00800068  00000a20  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a20  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a50  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c8  00000000  00000000  00000a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001df9  00000000  00000000  00000c54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b92  00000000  00000000  00002a4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fc0  00000000  00000000  000035df  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000494  00000000  00000000  000045a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008f6  00000000  00000000  00004a34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001085  00000000  00000000  0000532a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  000063af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 82 03 	jmp	0x704	; 0x704 <__vector_1>
   8:	0c 94 a9 03 	jmp	0x752	; 0x752 <__vector_2>
   c:	0c 94 d0 03 	jmp	0x7a0	; 0x7a0 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 1e 04 	jmp	0x83c	; 0x83c <__vector_10>
  2c:	0c 94 f7 03 	jmp	0x7ee	; 0x7ee <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e8       	ldi	r30, 0x84	; 132
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 37       	cpi	r26, 0x78	; 120
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 c0 04 	jmp	0x980	; 0x980 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
uint8 percentage = 0;


int main(void)
{
	DIO_voidSetPinDirection(PORTA_ID,PIN0_ID,INPUT_PIN);
  92:	40 e0       	ldi	r20, 0x00	; 0
  94:	60 e0       	ldi	r22, 0x00	; 0
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	0e 94 a8 02 	call	0x550	; 0x550 <DIO_voidSetPinDirection>
	ADC_init();
  9c:	0e 94 68 02 	call	0x4d0	; 0x4d0 <ADC_init>
	LCD_init();
  a0:	0e 94 47 01 	call	0x28e	; 0x28e <LCD_init>
	UART_init(9600);
  a4:	80 e8       	ldi	r24, 0x80	; 128
  a6:	95 e2       	ldi	r25, 0x25	; 37
  a8:	0e 94 45 04 	call	0x88a	; 0x88a <UART_init>
	LCD_moveCursor(0,0);
  ac:	60 e0       	ldi	r22, 0x00	; 0
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	0e 94 33 02 	call	0x466	; 0x466 <LCD_moveCursor>
	LCD_displayString("Temp: ");
  b4:	80 e6       	ldi	r24, 0x60	; 96
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	0e 94 26 02 	call	0x44c	; 0x44c <LCD_displayString>
	

    while (1) 
    {	
		ADC_readChannel(CH_0,ptr);
  bc:	60 91 6b 00 	lds	r22, 0x006B	; 0x80006b <ptr>
  c0:	70 91 6c 00 	lds	r23, 0x006C	; 0x80006c <ptr+0x1>
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	0e 94 93 02 	call	0x526	; 0x526 <ADC_readChannel>
		analogValue = (*ptr * 5000UL)/1024;
  ca:	e0 91 6b 00 	lds	r30, 0x006B	; 0x80006b <ptr>
  ce:	f0 91 6c 00 	lds	r31, 0x006C	; 0x80006c <ptr+0x1>
  d2:	20 81       	ld	r18, Z
  d4:	31 81       	ldd	r19, Z+1	; 0x01
  d6:	a8 e8       	ldi	r26, 0x88	; 136
  d8:	b3 e1       	ldi	r27, 0x13	; 19
  da:	0e 94 71 04 	call	0x8e2	; 0x8e2 <__umulhisi3>
  de:	dc 01       	movw	r26, r24
  e0:	cb 01       	movw	r24, r22
  e2:	07 2e       	mov	r0, r23
  e4:	7a e0       	ldi	r23, 0x0A	; 10
  e6:	b6 95       	lsr	r27
  e8:	a7 95       	ror	r26
  ea:	97 95       	ror	r25
  ec:	87 95       	ror	r24
  ee:	7a 95       	dec	r23
  f0:	d1 f7       	brne	.-12     	; 0xe6 <main+0x54>
  f2:	70 2d       	mov	r23, r0
  f4:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <analogValue+0x1>
  f8:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <analogValue>
		percentage = (analogValue*100UL)/1024;
  fc:	9c 01       	movw	r18, r24
  fe:	a4 e6       	ldi	r26, 0x64	; 100
 100:	b0 e0       	ldi	r27, 0x00	; 0
 102:	0e 94 71 04 	call	0x8e2	; 0x8e2 <__umulhisi3>
 106:	dc 01       	movw	r26, r24
 108:	cb 01       	movw	r24, r22
 10a:	07 2e       	mov	r0, r23
 10c:	7a e0       	ldi	r23, 0x0A	; 10
 10e:	b6 95       	lsr	r27
 110:	a7 95       	ror	r26
 112:	97 95       	ror	r25
 114:	87 95       	ror	r24
 116:	7a 95       	dec	r23
 118:	d1 f7       	brne	.-12     	; 0x10e <main+0x7c>
 11a:	70 2d       	mov	r23, r0
 11c:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__data_end>
		UART_receive(&receivedValue);
 120:	8d e6       	ldi	r24, 0x6D	; 109
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	0e 94 61 04 	call	0x8c2	; 0x8c2 <UART_receive>
		UART_transmit(percentage);
 128:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
 12c:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <UART_transmit>
		LCD_moveCursor(0,5);
 130:	65 e0       	ldi	r22, 0x05	; 5
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	0e 94 33 02 	call	0x466	; 0x466 <LCD_moveCursor>
		LCD_intgerToString(receivedValue);
 138:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <receivedValue>
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	0e 94 4a 02 	call	0x494	; 0x494 <LCD_intgerToString>
 142:	bc cf       	rjmp	.-136    	; 0xbc <main+0x2a>

00000144 <LCD_sendCommand>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
	LCD_moveCursor(row,col); /* go to to the required LCD position */
	LCD_displayString(Str); /* display the string */
}
 144:	cf 93       	push	r28
 146:	c8 2f       	mov	r28, r24
 148:	40 e0       	ldi	r20, 0x00	; 0
 14a:	63 e0       	ldi	r22, 0x03	; 3
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	0e 94 15 03 	call	0x62a	; 0x62a <DIO_voidSetPinValue>
 152:	8f e9       	ldi	r24, 0x9F	; 159
 154:	9f e0       	ldi	r25, 0x0F	; 15
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <LCD_sendCommand+0x12>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <LCD_sendCommand+0x18>
 15c:	00 00       	nop
 15e:	41 e0       	ldi	r20, 0x01	; 1
 160:	62 e0       	ldi	r22, 0x02	; 2
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	0e 94 15 03 	call	0x62a	; 0x62a <DIO_voidSetPinValue>
 168:	8f e9       	ldi	r24, 0x9F	; 159
 16a:	9f e0       	ldi	r25, 0x0F	; 15
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <LCD_sendCommand+0x28>
 170:	00 c0       	rjmp	.+0      	; 0x172 <LCD_sendCommand+0x2e>
 172:	00 00       	nop
 174:	4c 2f       	mov	r20, r28
 176:	40 71       	andi	r20, 0x10	; 16
 178:	50 e0       	ldi	r21, 0x00	; 0
 17a:	55 95       	asr	r21
 17c:	47 95       	ror	r20
 17e:	55 95       	asr	r21
 180:	47 95       	ror	r20
 182:	55 95       	asr	r21
 184:	47 95       	ror	r20
 186:	55 95       	asr	r21
 188:	47 95       	ror	r20
 18a:	60 e0       	ldi	r22, 0x00	; 0
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	0e 94 15 03 	call	0x62a	; 0x62a <DIO_voidSetPinValue>
 192:	4c 2f       	mov	r20, r28
 194:	40 72       	andi	r20, 0x20	; 32
 196:	50 e0       	ldi	r21, 0x00	; 0
 198:	55 95       	asr	r21
 19a:	47 95       	ror	r20
 19c:	55 95       	asr	r21
 19e:	47 95       	ror	r20
 1a0:	55 95       	asr	r21
 1a2:	47 95       	ror	r20
 1a4:	55 95       	asr	r21
 1a6:	47 95       	ror	r20
 1a8:	55 95       	asr	r21
 1aa:	47 95       	ror	r20
 1ac:	61 e0       	ldi	r22, 0x01	; 1
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	0e 94 15 03 	call	0x62a	; 0x62a <DIO_voidSetPinValue>
 1b4:	4c 2f       	mov	r20, r28
 1b6:	40 74       	andi	r20, 0x40	; 64
 1b8:	50 e0       	ldi	r21, 0x00	; 0
 1ba:	04 2e       	mov	r0, r20
 1bc:	45 2f       	mov	r20, r21
 1be:	00 0c       	add	r0, r0
 1c0:	44 1f       	adc	r20, r20
 1c2:	55 0b       	sbc	r21, r21
 1c4:	00 0c       	add	r0, r0
 1c6:	44 1f       	adc	r20, r20
 1c8:	55 1f       	adc	r21, r21
 1ca:	62 e0       	ldi	r22, 0x02	; 2
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	0e 94 15 03 	call	0x62a	; 0x62a <DIO_voidSetPinValue>
 1d2:	4c 2f       	mov	r20, r28
 1d4:	44 1f       	adc	r20, r20
 1d6:	44 27       	eor	r20, r20
 1d8:	44 1f       	adc	r20, r20
 1da:	64 e0       	ldi	r22, 0x04	; 4
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	0e 94 15 03 	call	0x62a	; 0x62a <DIO_voidSetPinValue>
 1e2:	8f e9       	ldi	r24, 0x9F	; 159
 1e4:	9f e0       	ldi	r25, 0x0F	; 15
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <LCD_sendCommand+0xa2>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <LCD_sendCommand+0xa8>
 1ec:	00 00       	nop
 1ee:	40 e0       	ldi	r20, 0x00	; 0
 1f0:	62 e0       	ldi	r22, 0x02	; 2
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	0e 94 15 03 	call	0x62a	; 0x62a <DIO_voidSetPinValue>
 1f8:	8f e9       	ldi	r24, 0x9F	; 159
 1fa:	9f e0       	ldi	r25, 0x0F	; 15
 1fc:	01 97       	sbiw	r24, 0x01	; 1
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <LCD_sendCommand+0xb8>
 200:	00 c0       	rjmp	.+0      	; 0x202 <LCD_sendCommand+0xbe>
 202:	00 00       	nop
 204:	41 e0       	ldi	r20, 0x01	; 1
 206:	62 e0       	ldi	r22, 0x02	; 2
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	0e 94 15 03 	call	0x62a	; 0x62a <DIO_voidSetPinValue>
 20e:	8f e9       	ldi	r24, 0x9F	; 159
 210:	9f e0       	ldi	r25, 0x0F	; 15
 212:	01 97       	sbiw	r24, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <LCD_sendCommand+0xce>
 216:	00 c0       	rjmp	.+0      	; 0x218 <LCD_sendCommand+0xd4>
 218:	00 00       	nop
 21a:	4c 2f       	mov	r20, r28
 21c:	41 70       	andi	r20, 0x01	; 1
 21e:	60 e0       	ldi	r22, 0x00	; 0
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	0e 94 15 03 	call	0x62a	; 0x62a <DIO_voidSetPinValue>
 226:	4c 2f       	mov	r20, r28
 228:	42 70       	andi	r20, 0x02	; 2
 22a:	50 e0       	ldi	r21, 0x00	; 0
 22c:	55 95       	asr	r21
 22e:	47 95       	ror	r20
 230:	61 e0       	ldi	r22, 0x01	; 1
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	0e 94 15 03 	call	0x62a	; 0x62a <DIO_voidSetPinValue>
 238:	4c 2f       	mov	r20, r28
 23a:	44 70       	andi	r20, 0x04	; 4
 23c:	50 e0       	ldi	r21, 0x00	; 0
 23e:	55 95       	asr	r21
 240:	47 95       	ror	r20
 242:	55 95       	asr	r21
 244:	47 95       	ror	r20
 246:	62 e0       	ldi	r22, 0x02	; 2
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	0e 94 15 03 	call	0x62a	; 0x62a <DIO_voidSetPinValue>
 24e:	c8 70       	andi	r28, 0x08	; 8
 250:	4c 2f       	mov	r20, r28
 252:	50 e0       	ldi	r21, 0x00	; 0
 254:	55 95       	asr	r21
 256:	47 95       	ror	r20
 258:	55 95       	asr	r21
 25a:	47 95       	ror	r20
 25c:	55 95       	asr	r21
 25e:	47 95       	ror	r20
 260:	64 e0       	ldi	r22, 0x04	; 4
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	0e 94 15 03 	call	0x62a	; 0x62a <DIO_voidSetPinValue>
 268:	8f e9       	ldi	r24, 0x9F	; 159
 26a:	9f e0       	ldi	r25, 0x0F	; 15
 26c:	01 97       	sbiw	r24, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <LCD_sendCommand+0x128>
 270:	00 c0       	rjmp	.+0      	; 0x272 <LCD_sendCommand+0x12e>
 272:	00 00       	nop
 274:	40 e0       	ldi	r20, 0x00	; 0
 276:	62 e0       	ldi	r22, 0x02	; 2
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	0e 94 15 03 	call	0x62a	; 0x62a <DIO_voidSetPinValue>
 27e:	8f e9       	ldi	r24, 0x9F	; 159
 280:	9f e0       	ldi	r25, 0x0F	; 15
 282:	01 97       	sbiw	r24, 0x01	; 1
 284:	f1 f7       	brne	.-4      	; 0x282 <LCD_sendCommand+0x13e>
 286:	00 c0       	rjmp	.+0      	; 0x288 <LCD_sendCommand+0x144>
 288:	00 00       	nop
 28a:	cf 91       	pop	r28
 28c:	08 95       	ret

0000028e <LCD_init>:
 28e:	41 e0       	ldi	r20, 0x01	; 1
 290:	63 e0       	ldi	r22, 0x03	; 3
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	0e 94 a8 02 	call	0x550	; 0x550 <DIO_voidSetPinDirection>
 298:	41 e0       	ldi	r20, 0x01	; 1
 29a:	62 e0       	ldi	r22, 0x02	; 2
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	0e 94 a8 02 	call	0x550	; 0x550 <DIO_voidSetPinDirection>
 2a2:	2f ef       	ldi	r18, 0xFF	; 255
 2a4:	89 ef       	ldi	r24, 0xF9	; 249
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	21 50       	subi	r18, 0x01	; 1
 2aa:	80 40       	sbci	r24, 0x00	; 0
 2ac:	90 40       	sbci	r25, 0x00	; 0
 2ae:	e1 f7       	brne	.-8      	; 0x2a8 <LCD_init+0x1a>
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <LCD_init+0x24>
 2b2:	00 00       	nop
 2b4:	41 e0       	ldi	r20, 0x01	; 1
 2b6:	60 e0       	ldi	r22, 0x00	; 0
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	0e 94 a8 02 	call	0x550	; 0x550 <DIO_voidSetPinDirection>
 2be:	41 e0       	ldi	r20, 0x01	; 1
 2c0:	61 e0       	ldi	r22, 0x01	; 1
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	0e 94 a8 02 	call	0x550	; 0x550 <DIO_voidSetPinDirection>
 2c8:	41 e0       	ldi	r20, 0x01	; 1
 2ca:	62 e0       	ldi	r22, 0x02	; 2
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	0e 94 a8 02 	call	0x550	; 0x550 <DIO_voidSetPinDirection>
 2d2:	41 e0       	ldi	r20, 0x01	; 1
 2d4:	64 e0       	ldi	r22, 0x04	; 4
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	0e 94 a8 02 	call	0x550	; 0x550 <DIO_voidSetPinDirection>
 2dc:	83 e3       	ldi	r24, 0x33	; 51
 2de:	0e 94 a2 00 	call	0x144	; 0x144 <LCD_sendCommand>
 2e2:	82 e3       	ldi	r24, 0x32	; 50
 2e4:	0e 94 a2 00 	call	0x144	; 0x144 <LCD_sendCommand>
 2e8:	88 e2       	ldi	r24, 0x28	; 40
 2ea:	0e 94 a2 00 	call	0x144	; 0x144 <LCD_sendCommand>
 2ee:	86 e0       	ldi	r24, 0x06	; 6
 2f0:	0e 94 a2 00 	call	0x144	; 0x144 <LCD_sendCommand>
 2f4:	8c e0       	ldi	r24, 0x0C	; 12
 2f6:	0e 94 a2 00 	call	0x144	; 0x144 <LCD_sendCommand>
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	0e 94 a2 00 	call	0x144	; 0x144 <LCD_sendCommand>
 300:	08 95       	ret

00000302 <LCD_displayCharacter>:
 302:	cf 93       	push	r28
 304:	c8 2f       	mov	r28, r24
 306:	41 e0       	ldi	r20, 0x01	; 1
 308:	63 e0       	ldi	r22, 0x03	; 3
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	0e 94 15 03 	call	0x62a	; 0x62a <DIO_voidSetPinValue>
 310:	8f e9       	ldi	r24, 0x9F	; 159
 312:	9f e0       	ldi	r25, 0x0F	; 15
 314:	01 97       	sbiw	r24, 0x01	; 1
 316:	f1 f7       	brne	.-4      	; 0x314 <LCD_displayCharacter+0x12>
 318:	00 c0       	rjmp	.+0      	; 0x31a <LCD_displayCharacter+0x18>
 31a:	00 00       	nop
 31c:	41 e0       	ldi	r20, 0x01	; 1
 31e:	62 e0       	ldi	r22, 0x02	; 2
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	0e 94 15 03 	call	0x62a	; 0x62a <DIO_voidSetPinValue>
 326:	8f e9       	ldi	r24, 0x9F	; 159
 328:	9f e0       	ldi	r25, 0x0F	; 15
 32a:	01 97       	sbiw	r24, 0x01	; 1
 32c:	f1 f7       	brne	.-4      	; 0x32a <LCD_displayCharacter+0x28>
 32e:	00 c0       	rjmp	.+0      	; 0x330 <LCD_displayCharacter+0x2e>
 330:	00 00       	nop
 332:	4c 2f       	mov	r20, r28
 334:	40 71       	andi	r20, 0x10	; 16
 336:	50 e0       	ldi	r21, 0x00	; 0
 338:	55 95       	asr	r21
 33a:	47 95       	ror	r20
 33c:	55 95       	asr	r21
 33e:	47 95       	ror	r20
 340:	55 95       	asr	r21
 342:	47 95       	ror	r20
 344:	55 95       	asr	r21
 346:	47 95       	ror	r20
 348:	60 e0       	ldi	r22, 0x00	; 0
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	0e 94 15 03 	call	0x62a	; 0x62a <DIO_voidSetPinValue>
 350:	4c 2f       	mov	r20, r28
 352:	40 72       	andi	r20, 0x20	; 32
 354:	50 e0       	ldi	r21, 0x00	; 0
 356:	55 95       	asr	r21
 358:	47 95       	ror	r20
 35a:	55 95       	asr	r21
 35c:	47 95       	ror	r20
 35e:	55 95       	asr	r21
 360:	47 95       	ror	r20
 362:	55 95       	asr	r21
 364:	47 95       	ror	r20
 366:	55 95       	asr	r21
 368:	47 95       	ror	r20
 36a:	61 e0       	ldi	r22, 0x01	; 1
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	0e 94 15 03 	call	0x62a	; 0x62a <DIO_voidSetPinValue>
 372:	4c 2f       	mov	r20, r28
 374:	40 74       	andi	r20, 0x40	; 64
 376:	50 e0       	ldi	r21, 0x00	; 0
 378:	04 2e       	mov	r0, r20
 37a:	45 2f       	mov	r20, r21
 37c:	00 0c       	add	r0, r0
 37e:	44 1f       	adc	r20, r20
 380:	55 0b       	sbc	r21, r21
 382:	00 0c       	add	r0, r0
 384:	44 1f       	adc	r20, r20
 386:	55 1f       	adc	r21, r21
 388:	62 e0       	ldi	r22, 0x02	; 2
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	0e 94 15 03 	call	0x62a	; 0x62a <DIO_voidSetPinValue>
 390:	4c 2f       	mov	r20, r28
 392:	44 1f       	adc	r20, r20
 394:	44 27       	eor	r20, r20
 396:	44 1f       	adc	r20, r20
 398:	64 e0       	ldi	r22, 0x04	; 4
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	0e 94 15 03 	call	0x62a	; 0x62a <DIO_voidSetPinValue>
 3a0:	8f e9       	ldi	r24, 0x9F	; 159
 3a2:	9f e0       	ldi	r25, 0x0F	; 15
 3a4:	01 97       	sbiw	r24, 0x01	; 1
 3a6:	f1 f7       	brne	.-4      	; 0x3a4 <LCD_displayCharacter+0xa2>
 3a8:	00 c0       	rjmp	.+0      	; 0x3aa <LCD_displayCharacter+0xa8>
 3aa:	00 00       	nop
 3ac:	40 e0       	ldi	r20, 0x00	; 0
 3ae:	62 e0       	ldi	r22, 0x02	; 2
 3b0:	80 e0       	ldi	r24, 0x00	; 0
 3b2:	0e 94 15 03 	call	0x62a	; 0x62a <DIO_voidSetPinValue>
 3b6:	8f e9       	ldi	r24, 0x9F	; 159
 3b8:	9f e0       	ldi	r25, 0x0F	; 15
 3ba:	01 97       	sbiw	r24, 0x01	; 1
 3bc:	f1 f7       	brne	.-4      	; 0x3ba <LCD_displayCharacter+0xb8>
 3be:	00 c0       	rjmp	.+0      	; 0x3c0 <LCD_displayCharacter+0xbe>
 3c0:	00 00       	nop
 3c2:	41 e0       	ldi	r20, 0x01	; 1
 3c4:	62 e0       	ldi	r22, 0x02	; 2
 3c6:	80 e0       	ldi	r24, 0x00	; 0
 3c8:	0e 94 15 03 	call	0x62a	; 0x62a <DIO_voidSetPinValue>
 3cc:	8f e9       	ldi	r24, 0x9F	; 159
 3ce:	9f e0       	ldi	r25, 0x0F	; 15
 3d0:	01 97       	sbiw	r24, 0x01	; 1
 3d2:	f1 f7       	brne	.-4      	; 0x3d0 <LCD_displayCharacter+0xce>
 3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <LCD_displayCharacter+0xd4>
 3d6:	00 00       	nop
 3d8:	4c 2f       	mov	r20, r28
 3da:	41 70       	andi	r20, 0x01	; 1
 3dc:	60 e0       	ldi	r22, 0x00	; 0
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	0e 94 15 03 	call	0x62a	; 0x62a <DIO_voidSetPinValue>
 3e4:	4c 2f       	mov	r20, r28
 3e6:	42 70       	andi	r20, 0x02	; 2
 3e8:	50 e0       	ldi	r21, 0x00	; 0
 3ea:	55 95       	asr	r21
 3ec:	47 95       	ror	r20
 3ee:	61 e0       	ldi	r22, 0x01	; 1
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	0e 94 15 03 	call	0x62a	; 0x62a <DIO_voidSetPinValue>
 3f6:	4c 2f       	mov	r20, r28
 3f8:	44 70       	andi	r20, 0x04	; 4
 3fa:	50 e0       	ldi	r21, 0x00	; 0
 3fc:	55 95       	asr	r21
 3fe:	47 95       	ror	r20
 400:	55 95       	asr	r21
 402:	47 95       	ror	r20
 404:	62 e0       	ldi	r22, 0x02	; 2
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	0e 94 15 03 	call	0x62a	; 0x62a <DIO_voidSetPinValue>
 40c:	c8 70       	andi	r28, 0x08	; 8
 40e:	4c 2f       	mov	r20, r28
 410:	50 e0       	ldi	r21, 0x00	; 0
 412:	55 95       	asr	r21
 414:	47 95       	ror	r20
 416:	55 95       	asr	r21
 418:	47 95       	ror	r20
 41a:	55 95       	asr	r21
 41c:	47 95       	ror	r20
 41e:	64 e0       	ldi	r22, 0x04	; 4
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	0e 94 15 03 	call	0x62a	; 0x62a <DIO_voidSetPinValue>
 426:	8f e9       	ldi	r24, 0x9F	; 159
 428:	9f e0       	ldi	r25, 0x0F	; 15
 42a:	01 97       	sbiw	r24, 0x01	; 1
 42c:	f1 f7       	brne	.-4      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 42e:	00 c0       	rjmp	.+0      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 430:	00 00       	nop
 432:	40 e0       	ldi	r20, 0x00	; 0
 434:	62 e0       	ldi	r22, 0x02	; 2
 436:	80 e0       	ldi	r24, 0x00	; 0
 438:	0e 94 15 03 	call	0x62a	; 0x62a <DIO_voidSetPinValue>
 43c:	8f e9       	ldi	r24, 0x9F	; 159
 43e:	9f e0       	ldi	r25, 0x0F	; 15
 440:	01 97       	sbiw	r24, 0x01	; 1
 442:	f1 f7       	brne	.-4      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 444:	00 c0       	rjmp	.+0      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 446:	00 00       	nop
 448:	cf 91       	pop	r28
 44a:	08 95       	ret

0000044c <LCD_displayString>:
 44c:	cf 93       	push	r28
 44e:	df 93       	push	r29
 450:	ec 01       	movw	r28, r24
 452:	03 c0       	rjmp	.+6      	; 0x45a <LCD_displayString+0xe>
 454:	0e 94 81 01 	call	0x302	; 0x302 <LCD_displayCharacter>
 458:	21 96       	adiw	r28, 0x01	; 1
 45a:	88 81       	ld	r24, Y
 45c:	81 11       	cpse	r24, r1
 45e:	fa cf       	rjmp	.-12     	; 0x454 <LCD_displayString+0x8>
 460:	df 91       	pop	r29
 462:	cf 91       	pop	r28
 464:	08 95       	ret

00000466 <LCD_moveCursor>:
 466:	81 30       	cpi	r24, 0x01	; 1
 468:	31 f0       	breq	.+12     	; 0x476 <LCD_moveCursor+0x10>
 46a:	70 f0       	brcs	.+28     	; 0x488 <LCD_moveCursor+0x22>
 46c:	82 30       	cpi	r24, 0x02	; 2
 46e:	31 f0       	breq	.+12     	; 0x47c <LCD_moveCursor+0x16>
 470:	83 30       	cpi	r24, 0x03	; 3
 472:	39 f0       	breq	.+14     	; 0x482 <LCD_moveCursor+0x1c>
 474:	0a c0       	rjmp	.+20     	; 0x48a <LCD_moveCursor+0x24>
 476:	90 e4       	ldi	r25, 0x40	; 64
 478:	96 0f       	add	r25, r22
 47a:	07 c0       	rjmp	.+14     	; 0x48a <LCD_moveCursor+0x24>
 47c:	90 e1       	ldi	r25, 0x10	; 16
 47e:	96 0f       	add	r25, r22
 480:	04 c0       	rjmp	.+8      	; 0x48a <LCD_moveCursor+0x24>
 482:	90 e5       	ldi	r25, 0x50	; 80
 484:	96 0f       	add	r25, r22
 486:	01 c0       	rjmp	.+2      	; 0x48a <LCD_moveCursor+0x24>
 488:	96 2f       	mov	r25, r22
 48a:	89 2f       	mov	r24, r25
 48c:	80 68       	ori	r24, 0x80	; 128
 48e:	0e 94 a2 00 	call	0x144	; 0x144 <LCD_sendCommand>
 492:	08 95       	ret

00000494 <LCD_intgerToString>:


void LCD_intgerToString(int data)
{
 494:	cf 93       	push	r28
 496:	df 93       	push	r29
 498:	cd b7       	in	r28, 0x3d	; 61
 49a:	de b7       	in	r29, 0x3e	; 62
 49c:	60 97       	sbiw	r28, 0x10	; 16
 49e:	0f b6       	in	r0, 0x3f	; 63
 4a0:	f8 94       	cli
 4a2:	de bf       	out	0x3e, r29	; 62
 4a4:	0f be       	out	0x3f, r0	; 63
 4a6:	cd bf       	out	0x3d, r28	; 61
	char buff[16]; /* String to hold the ascii result */
	itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
 4a8:	4a e0       	ldi	r20, 0x0A	; 10
 4aa:	50 e0       	ldi	r21, 0x00	; 0
 4ac:	be 01       	movw	r22, r28
 4ae:	6f 5f       	subi	r22, 0xFF	; 255
 4b0:	7f 4f       	sbci	r23, 0xFF	; 255
 4b2:	0e 94 80 04 	call	0x900	; 0x900 <itoa>
	LCD_displayString(buff); /* Display the string */
 4b6:	ce 01       	movw	r24, r28
 4b8:	01 96       	adiw	r24, 0x01	; 1
 4ba:	0e 94 26 02 	call	0x44c	; 0x44c <LCD_displayString>
}
 4be:	60 96       	adiw	r28, 0x10	; 16
 4c0:	0f b6       	in	r0, 0x3f	; 63
 4c2:	f8 94       	cli
 4c4:	de bf       	out	0x3e, r29	; 62
 4c6:	0f be       	out	0x3f, r0	; 63
 4c8:	cd bf       	out	0x3d, r28	; 61
 4ca:	df 91       	pop	r29
 4cc:	cf 91       	pop	r28
 4ce:	08 95       	ret

000004d0 <ADC_init>:
#include "../Common_Macros.h"

void ADC_init(void)
{
	/*disable ADC*/
	CLEAR_BIT(ADCSRA,ADEN);
 4d0:	86 b1       	in	r24, 0x06	; 6
 4d2:	8f 77       	andi	r24, 0x7F	; 127
 4d4:	86 b9       	out	0x06, r24	; 6
	
	/*use AVCC*/
	SET_BIT(ADMUX,REFS0);
 4d6:	87 b1       	in	r24, 0x07	; 7
 4d8:	80 64       	ori	r24, 0x40	; 64
 4da:	87 b9       	out	0x07, r24	; 7
	CLEAR_BIT(ADMUX,REFS1);
 4dc:	87 b1       	in	r24, 0x07	; 7
 4de:	8f 77       	andi	r24, 0x7F	; 127
 4e0:	87 b9       	out	0x07, r24	; 7
	
	/*Right adjustment*/
	CLEAR_BIT(ADMUX,REFS1);
 4e2:	87 b1       	in	r24, 0x07	; 7
 4e4:	8f 77       	andi	r24, 0x7F	; 127
 4e6:	87 b9       	out	0x07, r24	; 7
	
	/*Select Prescaler 128*/
	SET_BIT(ADCSRA,ADPS0);
 4e8:	86 b1       	in	r24, 0x06	; 6
 4ea:	81 60       	ori	r24, 0x01	; 1
 4ec:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA,ADPS1);
 4ee:	86 b1       	in	r24, 0x06	; 6
 4f0:	82 60       	ori	r24, 0x02	; 2
 4f2:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA,ADPS2);
 4f4:	86 b1       	in	r24, 0x06	; 6
 4f6:	84 60       	ori	r24, 0x04	; 4
 4f8:	86 b9       	out	0x06, r24	; 6
	
	/*Disable ADC Interrupts*/
	CLEAR_BIT(ADCSRA,ADIE);
 4fa:	86 b1       	in	r24, 0x06	; 6
 4fc:	87 7f       	andi	r24, 0xF7	; 247
 4fe:	86 b9       	out	0x06, r24	; 6
	
	/*disable auto triggering*/
	CLEAR_BIT(ADCSRA,ADATE);
 500:	86 b1       	in	r24, 0x06	; 6
 502:	8f 7d       	andi	r24, 0xDF	; 223
 504:	86 b9       	out	0x06, r24	; 6
	
	/*clear the source of auto triggering*/
	CLEAR_BIT(SFIOR,ADTS0);
 506:	80 b7       	in	r24, 0x30	; 48
 508:	8f 7d       	andi	r24, 0xDF	; 223
 50a:	80 bf       	out	0x30, r24	; 48
	CLEAR_BIT(SFIOR,ADTS1);
 50c:	80 b7       	in	r24, 0x30	; 48
 50e:	8f 7b       	andi	r24, 0xBF	; 191
 510:	80 bf       	out	0x30, r24	; 48
	CLEAR_BIT(SFIOR,ADTS2);
 512:	80 b7       	in	r24, 0x30	; 48
 514:	8f 77       	andi	r24, 0x7F	; 127
 516:	80 bf       	out	0x30, r24	; 48
		//
	///*clear start conversion*/
	//CLEAR_BIT(ADCSRA,ADSC);
	
	/*Clear flag*/
	SET_BIT(ADCSRA,ADIF);
 518:	86 b1       	in	r24, 0x06	; 6
 51a:	80 61       	ori	r24, 0x10	; 16
 51c:	86 b9       	out	0x06, r24	; 6
	
	/*enable ADC*/
	SET_BIT(ADCSRA,ADEN);
 51e:	86 b1       	in	r24, 0x06	; 6
 520:	80 68       	ori	r24, 0x80	; 128
 522:	86 b9       	out	0x06, r24	; 6
 524:	08 95       	ret

00000526 <ADC_readChannel>:
}

void ADC_readChannel(uint8 CH_num, uint16* ptr)
{
	/*initialize channel to 0*/
	ADMUX |= ((ADMUX & 0xE0) | (CH_num & 0x07)); 
 526:	27 b1       	in	r18, 0x07	; 7
 528:	97 b1       	in	r25, 0x07	; 7
 52a:	20 7e       	andi	r18, 0xE0	; 224
 52c:	87 70       	andi	r24, 0x07	; 7
 52e:	82 2b       	or	r24, r18
 530:	98 2b       	or	r25, r24
 532:	97 b9       	out	0x07, r25	; 7
	
	/*Start Conversion*/
	SET_BIT(ADCSRA,ADSC);
 534:	86 b1       	in	r24, 0x06	; 6
 536:	80 64       	ori	r24, 0x40	; 64
 538:	86 b9       	out	0x06, r24	; 6
		
	/*wait for flag*/
	while(BIT_IS_CLEAR(ADCSRA,ADIF));
 53a:	34 9b       	sbis	0x06, 4	; 6
 53c:	fe cf       	rjmp	.-4      	; 0x53a <ADC_readChannel+0x14>
		
	/*clear flag*/
	SET_BIT(ADCSRA,ADIF);
 53e:	86 b1       	in	r24, 0x06	; 6
 540:	80 61       	ori	r24, 0x10	; 16
 542:	86 b9       	out	0x06, r24	; 6
	
	/*save the data*/
	*ptr = ADC;
 544:	84 b1       	in	r24, 0x04	; 4
 546:	95 b1       	in	r25, 0x05	; 5
 548:	fb 01       	movw	r30, r22
 54a:	91 83       	std	Z+1, r25	; 0x01
 54c:	80 83       	st	Z, r24
 54e:	08 95       	ret

00000550 <DIO_voidSetPinDirection>:
	}
}

void DIO_voidSetPinDirection(uint8 copy_u8PortID,uint8 copy_u8PinID, uint8 copy_u8PinDir)
{
	switch(copy_u8PortID)
 550:	81 30       	cpi	r24, 0x01	; 1
 552:	01 f1       	breq	.+64     	; 0x594 <DIO_voidSetPinDirection+0x44>
 554:	30 f0       	brcs	.+12     	; 0x562 <DIO_voidSetPinDirection+0x12>
 556:	82 30       	cpi	r24, 0x02	; 2
 558:	b1 f1       	breq	.+108    	; 0x5c6 <DIO_voidSetPinDirection+0x76>
 55a:	83 30       	cpi	r24, 0x03	; 3
 55c:	09 f4       	brne	.+2      	; 0x560 <DIO_voidSetPinDirection+0x10>
 55e:	4c c0       	rjmp	.+152    	; 0x5f8 <DIO_voidSetPinDirection+0xa8>
 560:	08 95       	ret
	{
		case PORTA_ID:
		if(copy_u8PinDir == OUTPUT_PIN)
 562:	41 30       	cpi	r20, 0x01	; 1
 564:	59 f4       	brne	.+22     	; 0x57c <DIO_voidSetPinDirection+0x2c>
		{
			SET_BIT(DDRA,copy_u8PinID);
 566:	2a b3       	in	r18, 0x1a	; 26
 568:	81 e0       	ldi	r24, 0x01	; 1
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	02 c0       	rjmp	.+4      	; 0x572 <DIO_voidSetPinDirection+0x22>
 56e:	88 0f       	add	r24, r24
 570:	99 1f       	adc	r25, r25
 572:	6a 95       	dec	r22
 574:	e2 f7       	brpl	.-8      	; 0x56e <DIO_voidSetPinDirection+0x1e>
 576:	82 2b       	or	r24, r18
 578:	8a bb       	out	0x1a, r24	; 26
 57a:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRA,copy_u8PinID);
 57c:	2a b3       	in	r18, 0x1a	; 26
 57e:	81 e0       	ldi	r24, 0x01	; 1
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	02 c0       	rjmp	.+4      	; 0x588 <DIO_voidSetPinDirection+0x38>
 584:	88 0f       	add	r24, r24
 586:	99 1f       	adc	r25, r25
 588:	6a 95       	dec	r22
 58a:	e2 f7       	brpl	.-8      	; 0x584 <DIO_voidSetPinDirection+0x34>
 58c:	80 95       	com	r24
 58e:	82 23       	and	r24, r18
 590:	8a bb       	out	0x1a, r24	; 26
 592:	08 95       	ret
		}
		break;
		
		case PORTB_ID:
		if(copy_u8PinDir == OUTPUT_PIN)
 594:	41 30       	cpi	r20, 0x01	; 1
 596:	59 f4       	brne	.+22     	; 0x5ae <DIO_voidSetPinDirection+0x5e>
		{
			SET_BIT(DDRB,copy_u8PinID);
 598:	27 b3       	in	r18, 0x17	; 23
 59a:	81 e0       	ldi	r24, 0x01	; 1
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	02 c0       	rjmp	.+4      	; 0x5a4 <DIO_voidSetPinDirection+0x54>
 5a0:	88 0f       	add	r24, r24
 5a2:	99 1f       	adc	r25, r25
 5a4:	6a 95       	dec	r22
 5a6:	e2 f7       	brpl	.-8      	; 0x5a0 <DIO_voidSetPinDirection+0x50>
 5a8:	82 2b       	or	r24, r18
 5aa:	87 bb       	out	0x17, r24	; 23
 5ac:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRB,copy_u8PinID);
 5ae:	27 b3       	in	r18, 0x17	; 23
 5b0:	81 e0       	ldi	r24, 0x01	; 1
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	02 c0       	rjmp	.+4      	; 0x5ba <DIO_voidSetPinDirection+0x6a>
 5b6:	88 0f       	add	r24, r24
 5b8:	99 1f       	adc	r25, r25
 5ba:	6a 95       	dec	r22
 5bc:	e2 f7       	brpl	.-8      	; 0x5b6 <DIO_voidSetPinDirection+0x66>
 5be:	80 95       	com	r24
 5c0:	82 23       	and	r24, r18
 5c2:	87 bb       	out	0x17, r24	; 23
 5c4:	08 95       	ret
		}
		break;
		
		case PORTC_ID:
		if(copy_u8PinDir == OUTPUT_PIN)
 5c6:	41 30       	cpi	r20, 0x01	; 1
 5c8:	59 f4       	brne	.+22     	; 0x5e0 <DIO_voidSetPinDirection+0x90>
		{
			SET_BIT(DDRC,copy_u8PinID);
 5ca:	24 b3       	in	r18, 0x14	; 20
 5cc:	81 e0       	ldi	r24, 0x01	; 1
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <DIO_voidSetPinDirection+0x86>
 5d2:	88 0f       	add	r24, r24
 5d4:	99 1f       	adc	r25, r25
 5d6:	6a 95       	dec	r22
 5d8:	e2 f7       	brpl	.-8      	; 0x5d2 <DIO_voidSetPinDirection+0x82>
 5da:	82 2b       	or	r24, r18
 5dc:	84 bb       	out	0x14, r24	; 20
 5de:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRC,copy_u8PinID);
 5e0:	24 b3       	in	r18, 0x14	; 20
 5e2:	81 e0       	ldi	r24, 0x01	; 1
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	02 c0       	rjmp	.+4      	; 0x5ec <DIO_voidSetPinDirection+0x9c>
 5e8:	88 0f       	add	r24, r24
 5ea:	99 1f       	adc	r25, r25
 5ec:	6a 95       	dec	r22
 5ee:	e2 f7       	brpl	.-8      	; 0x5e8 <DIO_voidSetPinDirection+0x98>
 5f0:	80 95       	com	r24
 5f2:	82 23       	and	r24, r18
 5f4:	84 bb       	out	0x14, r24	; 20
 5f6:	08 95       	ret
		}
		break;
		
		case PORTD_ID:
		if(copy_u8PinDir == OUTPUT_PIN)
 5f8:	41 30       	cpi	r20, 0x01	; 1
 5fa:	59 f4       	brne	.+22     	; 0x612 <DIO_voidSetPinDirection+0xc2>
		{
			SET_BIT(DDRD,copy_u8PinID);
 5fc:	21 b3       	in	r18, 0x11	; 17
 5fe:	81 e0       	ldi	r24, 0x01	; 1
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	02 c0       	rjmp	.+4      	; 0x608 <DIO_voidSetPinDirection+0xb8>
 604:	88 0f       	add	r24, r24
 606:	99 1f       	adc	r25, r25
 608:	6a 95       	dec	r22
 60a:	e2 f7       	brpl	.-8      	; 0x604 <DIO_voidSetPinDirection+0xb4>
 60c:	82 2b       	or	r24, r18
 60e:	81 bb       	out	0x11, r24	; 17
 610:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRD,copy_u8PinID);
 612:	21 b3       	in	r18, 0x11	; 17
 614:	81 e0       	ldi	r24, 0x01	; 1
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	02 c0       	rjmp	.+4      	; 0x61e <DIO_voidSetPinDirection+0xce>
 61a:	88 0f       	add	r24, r24
 61c:	99 1f       	adc	r25, r25
 61e:	6a 95       	dec	r22
 620:	e2 f7       	brpl	.-8      	; 0x61a <DIO_voidSetPinDirection+0xca>
 622:	80 95       	com	r24
 624:	82 23       	and	r24, r18
 626:	81 bb       	out	0x11, r24	; 17
 628:	08 95       	ret

0000062a <DIO_voidSetPinValue>:
		
	}
}
void DIO_voidSetPinValue(uint8 copy_u8PortID,uint8 copy_u8PinID, uint8 copy_u8PinValue)
{
	switch(copy_u8PortID)
 62a:	81 30       	cpi	r24, 0x01	; 1
 62c:	01 f1       	breq	.+64     	; 0x66e <DIO_voidSetPinValue+0x44>
 62e:	30 f0       	brcs	.+12     	; 0x63c <DIO_voidSetPinValue+0x12>
 630:	82 30       	cpi	r24, 0x02	; 2
 632:	b1 f1       	breq	.+108    	; 0x6a0 <DIO_voidSetPinValue+0x76>
 634:	83 30       	cpi	r24, 0x03	; 3
 636:	09 f4       	brne	.+2      	; 0x63a <DIO_voidSetPinValue+0x10>
 638:	4c c0       	rjmp	.+152    	; 0x6d2 <DIO_voidSetPinValue+0xa8>
 63a:	08 95       	ret
	{
		case PORTA_ID:
		if(copy_u8PinValue == LOGIC_HIGH)
 63c:	41 30       	cpi	r20, 0x01	; 1
 63e:	59 f4       	brne	.+22     	; 0x656 <DIO_voidSetPinValue+0x2c>
		{
			SET_BIT(PORTA,copy_u8PinID);
 640:	2b b3       	in	r18, 0x1b	; 27
 642:	81 e0       	ldi	r24, 0x01	; 1
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	02 c0       	rjmp	.+4      	; 0x64c <DIO_voidSetPinValue+0x22>
 648:	88 0f       	add	r24, r24
 64a:	99 1f       	adc	r25, r25
 64c:	6a 95       	dec	r22
 64e:	e2 f7       	brpl	.-8      	; 0x648 <DIO_voidSetPinValue+0x1e>
 650:	82 2b       	or	r24, r18
 652:	8b bb       	out	0x1b, r24	; 27
 654:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTA,copy_u8PinID);
 656:	2b b3       	in	r18, 0x1b	; 27
 658:	81 e0       	ldi	r24, 0x01	; 1
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	02 c0       	rjmp	.+4      	; 0x662 <DIO_voidSetPinValue+0x38>
 65e:	88 0f       	add	r24, r24
 660:	99 1f       	adc	r25, r25
 662:	6a 95       	dec	r22
 664:	e2 f7       	brpl	.-8      	; 0x65e <DIO_voidSetPinValue+0x34>
 666:	80 95       	com	r24
 668:	82 23       	and	r24, r18
 66a:	8b bb       	out	0x1b, r24	; 27
 66c:	08 95       	ret
		}
		break;
		
		case PORTB_ID:
		if(copy_u8PinValue == LOGIC_HIGH)
 66e:	41 30       	cpi	r20, 0x01	; 1
 670:	59 f4       	brne	.+22     	; 0x688 <DIO_voidSetPinValue+0x5e>
		{
			SET_BIT(PORTB,copy_u8PinID);
 672:	28 b3       	in	r18, 0x18	; 24
 674:	81 e0       	ldi	r24, 0x01	; 1
 676:	90 e0       	ldi	r25, 0x00	; 0
 678:	02 c0       	rjmp	.+4      	; 0x67e <DIO_voidSetPinValue+0x54>
 67a:	88 0f       	add	r24, r24
 67c:	99 1f       	adc	r25, r25
 67e:	6a 95       	dec	r22
 680:	e2 f7       	brpl	.-8      	; 0x67a <DIO_voidSetPinValue+0x50>
 682:	82 2b       	or	r24, r18
 684:	88 bb       	out	0x18, r24	; 24
 686:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTB,copy_u8PinID);
 688:	28 b3       	in	r18, 0x18	; 24
 68a:	81 e0       	ldi	r24, 0x01	; 1
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	02 c0       	rjmp	.+4      	; 0x694 <DIO_voidSetPinValue+0x6a>
 690:	88 0f       	add	r24, r24
 692:	99 1f       	adc	r25, r25
 694:	6a 95       	dec	r22
 696:	e2 f7       	brpl	.-8      	; 0x690 <DIO_voidSetPinValue+0x66>
 698:	80 95       	com	r24
 69a:	82 23       	and	r24, r18
 69c:	88 bb       	out	0x18, r24	; 24
 69e:	08 95       	ret
		}
		break;
		
		case PORTC_ID:
		if(copy_u8PinValue == LOGIC_HIGH)
 6a0:	41 30       	cpi	r20, 0x01	; 1
 6a2:	59 f4       	brne	.+22     	; 0x6ba <DIO_voidSetPinValue+0x90>
		{
			SET_BIT(PORTC,copy_u8PinID);
 6a4:	25 b3       	in	r18, 0x15	; 21
 6a6:	81 e0       	ldi	r24, 0x01	; 1
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	02 c0       	rjmp	.+4      	; 0x6b0 <DIO_voidSetPinValue+0x86>
 6ac:	88 0f       	add	r24, r24
 6ae:	99 1f       	adc	r25, r25
 6b0:	6a 95       	dec	r22
 6b2:	e2 f7       	brpl	.-8      	; 0x6ac <DIO_voidSetPinValue+0x82>
 6b4:	82 2b       	or	r24, r18
 6b6:	85 bb       	out	0x15, r24	; 21
 6b8:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTC,copy_u8PinID);
 6ba:	25 b3       	in	r18, 0x15	; 21
 6bc:	81 e0       	ldi	r24, 0x01	; 1
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	02 c0       	rjmp	.+4      	; 0x6c6 <DIO_voidSetPinValue+0x9c>
 6c2:	88 0f       	add	r24, r24
 6c4:	99 1f       	adc	r25, r25
 6c6:	6a 95       	dec	r22
 6c8:	e2 f7       	brpl	.-8      	; 0x6c2 <DIO_voidSetPinValue+0x98>
 6ca:	80 95       	com	r24
 6cc:	82 23       	and	r24, r18
 6ce:	85 bb       	out	0x15, r24	; 21
 6d0:	08 95       	ret
		}
		break;
		
		case PORTD_ID:
		if(copy_u8PinValue == LOGIC_HIGH)
 6d2:	41 30       	cpi	r20, 0x01	; 1
 6d4:	59 f4       	brne	.+22     	; 0x6ec <DIO_voidSetPinValue+0xc2>
		{
			SET_BIT(PORTD,copy_u8PinID);
 6d6:	22 b3       	in	r18, 0x12	; 18
 6d8:	81 e0       	ldi	r24, 0x01	; 1
 6da:	90 e0       	ldi	r25, 0x00	; 0
 6dc:	02 c0       	rjmp	.+4      	; 0x6e2 <DIO_voidSetPinValue+0xb8>
 6de:	88 0f       	add	r24, r24
 6e0:	99 1f       	adc	r25, r25
 6e2:	6a 95       	dec	r22
 6e4:	e2 f7       	brpl	.-8      	; 0x6de <DIO_voidSetPinValue+0xb4>
 6e6:	82 2b       	or	r24, r18
 6e8:	82 bb       	out	0x12, r24	; 18
 6ea:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTD,copy_u8PinID);
 6ec:	22 b3       	in	r18, 0x12	; 18
 6ee:	81 e0       	ldi	r24, 0x01	; 1
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	02 c0       	rjmp	.+4      	; 0x6f8 <DIO_voidSetPinValue+0xce>
 6f4:	88 0f       	add	r24, r24
 6f6:	99 1f       	adc	r25, r25
 6f8:	6a 95       	dec	r22
 6fa:	e2 f7       	brpl	.-8      	; 0x6f4 <DIO_voidSetPinValue+0xca>
 6fc:	80 95       	com	r24
 6fe:	82 23       	and	r24, r18
 700:	82 bb       	out	0x12, r24	; 18
 702:	08 95       	ret

00000704 <__vector_1>:
	}
}

void __vector_1()__attribute__((signal));
void __vector_1()
{
 704:	1f 92       	push	r1
 706:	0f 92       	push	r0
 708:	0f b6       	in	r0, 0x3f	; 63
 70a:	0f 92       	push	r0
 70c:	11 24       	eor	r1, r1
 70e:	2f 93       	push	r18
 710:	3f 93       	push	r19
 712:	4f 93       	push	r20
 714:	5f 93       	push	r21
 716:	6f 93       	push	r22
 718:	7f 93       	push	r23
 71a:	8f 93       	push	r24
 71c:	9f 93       	push	r25
 71e:	af 93       	push	r26
 720:	bf 93       	push	r27
 722:	ef 93       	push	r30
 724:	ff 93       	push	r31
	EXT0_ptr();
 726:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <EXT0_ptr>
 72a:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <EXT0_ptr+0x1>
 72e:	09 95       	icall
}
 730:	ff 91       	pop	r31
 732:	ef 91       	pop	r30
 734:	bf 91       	pop	r27
 736:	af 91       	pop	r26
 738:	9f 91       	pop	r25
 73a:	8f 91       	pop	r24
 73c:	7f 91       	pop	r23
 73e:	6f 91       	pop	r22
 740:	5f 91       	pop	r21
 742:	4f 91       	pop	r20
 744:	3f 91       	pop	r19
 746:	2f 91       	pop	r18
 748:	0f 90       	pop	r0
 74a:	0f be       	out	0x3f, r0	; 63
 74c:	0f 90       	pop	r0
 74e:	1f 90       	pop	r1
 750:	18 95       	reti

00000752 <__vector_2>:

void __vector_2()__attribute__((signal));
void __vector_2()
{
 752:	1f 92       	push	r1
 754:	0f 92       	push	r0
 756:	0f b6       	in	r0, 0x3f	; 63
 758:	0f 92       	push	r0
 75a:	11 24       	eor	r1, r1
 75c:	2f 93       	push	r18
 75e:	3f 93       	push	r19
 760:	4f 93       	push	r20
 762:	5f 93       	push	r21
 764:	6f 93       	push	r22
 766:	7f 93       	push	r23
 768:	8f 93       	push	r24
 76a:	9f 93       	push	r25
 76c:	af 93       	push	r26
 76e:	bf 93       	push	r27
 770:	ef 93       	push	r30
 772:	ff 93       	push	r31
	EXT1_ptr();
 774:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <EXT1_ptr>
 778:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <EXT1_ptr+0x1>
 77c:	09 95       	icall
}
 77e:	ff 91       	pop	r31
 780:	ef 91       	pop	r30
 782:	bf 91       	pop	r27
 784:	af 91       	pop	r26
 786:	9f 91       	pop	r25
 788:	8f 91       	pop	r24
 78a:	7f 91       	pop	r23
 78c:	6f 91       	pop	r22
 78e:	5f 91       	pop	r21
 790:	4f 91       	pop	r20
 792:	3f 91       	pop	r19
 794:	2f 91       	pop	r18
 796:	0f 90       	pop	r0
 798:	0f be       	out	0x3f, r0	; 63
 79a:	0f 90       	pop	r0
 79c:	1f 90       	pop	r1
 79e:	18 95       	reti

000007a0 <__vector_3>:

void __vector_3()__attribute__((signal));
void __vector_3()
{
 7a0:	1f 92       	push	r1
 7a2:	0f 92       	push	r0
 7a4:	0f b6       	in	r0, 0x3f	; 63
 7a6:	0f 92       	push	r0
 7a8:	11 24       	eor	r1, r1
 7aa:	2f 93       	push	r18
 7ac:	3f 93       	push	r19
 7ae:	4f 93       	push	r20
 7b0:	5f 93       	push	r21
 7b2:	6f 93       	push	r22
 7b4:	7f 93       	push	r23
 7b6:	8f 93       	push	r24
 7b8:	9f 93       	push	r25
 7ba:	af 93       	push	r26
 7bc:	bf 93       	push	r27
 7be:	ef 93       	push	r30
 7c0:	ff 93       	push	r31
	EXT2_ptr();
 7c2:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <EXT2_ptr>
 7c6:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <EXT2_ptr+0x1>
 7ca:	09 95       	icall
}
 7cc:	ff 91       	pop	r31
 7ce:	ef 91       	pop	r30
 7d0:	bf 91       	pop	r27
 7d2:	af 91       	pop	r26
 7d4:	9f 91       	pop	r25
 7d6:	8f 91       	pop	r24
 7d8:	7f 91       	pop	r23
 7da:	6f 91       	pop	r22
 7dc:	5f 91       	pop	r21
 7de:	4f 91       	pop	r20
 7e0:	3f 91       	pop	r19
 7e2:	2f 91       	pop	r18
 7e4:	0f 90       	pop	r0
 7e6:	0f be       	out	0x3f, r0	; 63
 7e8:	0f 90       	pop	r0
 7ea:	1f 90       	pop	r1
 7ec:	18 95       	reti

000007ee <__vector_11>:
	CLEAR_BIT(TCCR0,CS02);
}
/*Timer 0 overflow ISR*/
void __vector_11()__attribute__((signal));
void __vector_11()
{
 7ee:	1f 92       	push	r1
 7f0:	0f 92       	push	r0
 7f2:	0f b6       	in	r0, 0x3f	; 63
 7f4:	0f 92       	push	r0
 7f6:	11 24       	eor	r1, r1
 7f8:	2f 93       	push	r18
 7fa:	3f 93       	push	r19
 7fc:	4f 93       	push	r20
 7fe:	5f 93       	push	r21
 800:	6f 93       	push	r22
 802:	7f 93       	push	r23
 804:	8f 93       	push	r24
 806:	9f 93       	push	r25
 808:	af 93       	push	r26
 80a:	bf 93       	push	r27
 80c:	ef 93       	push	r30
 80e:	ff 93       	push	r31
	TIMER0_OVF_ptr();
 810:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <TIMER0_OVF_ptr>
 814:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <TIMER0_OVF_ptr+0x1>
 818:	09 95       	icall
}
 81a:	ff 91       	pop	r31
 81c:	ef 91       	pop	r30
 81e:	bf 91       	pop	r27
 820:	af 91       	pop	r26
 822:	9f 91       	pop	r25
 824:	8f 91       	pop	r24
 826:	7f 91       	pop	r23
 828:	6f 91       	pop	r22
 82a:	5f 91       	pop	r21
 82c:	4f 91       	pop	r20
 82e:	3f 91       	pop	r19
 830:	2f 91       	pop	r18
 832:	0f 90       	pop	r0
 834:	0f be       	out	0x3f, r0	; 63
 836:	0f 90       	pop	r0
 838:	1f 90       	pop	r1
 83a:	18 95       	reti

0000083c <__vector_10>:

/*Timer 0 compare ISR*/
void __vector_10()__attribute__((signal));
void __vector_10()
{
 83c:	1f 92       	push	r1
 83e:	0f 92       	push	r0
 840:	0f b6       	in	r0, 0x3f	; 63
 842:	0f 92       	push	r0
 844:	11 24       	eor	r1, r1
 846:	2f 93       	push	r18
 848:	3f 93       	push	r19
 84a:	4f 93       	push	r20
 84c:	5f 93       	push	r21
 84e:	6f 93       	push	r22
 850:	7f 93       	push	r23
 852:	8f 93       	push	r24
 854:	9f 93       	push	r25
 856:	af 93       	push	r26
 858:	bf 93       	push	r27
 85a:	ef 93       	push	r30
 85c:	ff 93       	push	r31
	TIMER0_CMP_ptr();
 85e:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <TIMER0_CMP_ptr>
 862:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <TIMER0_CMP_ptr+0x1>
 866:	09 95       	icall
}
 868:	ff 91       	pop	r31
 86a:	ef 91       	pop	r30
 86c:	bf 91       	pop	r27
 86e:	af 91       	pop	r26
 870:	9f 91       	pop	r25
 872:	8f 91       	pop	r24
 874:	7f 91       	pop	r23
 876:	6f 91       	pop	r22
 878:	5f 91       	pop	r21
 87a:	4f 91       	pop	r20
 87c:	3f 91       	pop	r19
 87e:	2f 91       	pop	r18
 880:	0f 90       	pop	r0
 882:	0f be       	out	0x3f, r0	; 63
 884:	0f 90       	pop	r0
 886:	1f 90       	pop	r1
 888:	18 95       	reti

0000088a <UART_init>:
void UART_init(uint16 baudRate)
{
	/*configure baud rate*/
	uint16 ubrr_value = 0;
	ubrr_value = (uint16)(((16000000UL / (baudRate * 16))) - 1);
	UBRRL = 103;
 88a:	87 e6       	ldi	r24, 0x67	; 103
 88c:	89 b9       	out	0x09, r24	; 9
	//UBRRH = (uint8)(ubrr_value>>8);
	
	DIO_voidSetPinDirection(PORTD_ID,PIN1_ID,OUTPUT_PIN);
 88e:	41 e0       	ldi	r20, 0x01	; 1
 890:	61 e0       	ldi	r22, 0x01	; 1
 892:	83 e0       	ldi	r24, 0x03	; 3
 894:	0e 94 a8 02 	call	0x550	; 0x550 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTD_ID,PIN0_ID,INPUT_PIN);
 898:	40 e0       	ldi	r20, 0x00	; 0
 89a:	60 e0       	ldi	r22, 0x00	; 0
 89c:	83 e0       	ldi	r24, 0x03	; 3
 89e:	0e 94 a8 02 	call	0x550	; 0x550 <DIO_voidSetPinDirection>
	
	CLEAR_BIT(UCSRA,U2X);
 8a2:	8b b1       	in	r24, 0x0b	; 11
 8a4:	8d 7f       	andi	r24, 0xFD	; 253
 8a6:	8b b9       	out	0x0b, r24	; 11
	
	/*enable receiver and transmitter*/
	SET_BIT(UCSRB,RXEN);
 8a8:	8a b1       	in	r24, 0x0a	; 10
 8aa:	80 61       	ori	r24, 0x10	; 16
 8ac:	8a b9       	out	0x0a, r24	; 10
	SET_BIT(UCSRB,TXEN);
 8ae:	8a b1       	in	r24, 0x0a	; 10
 8b0:	88 60       	ori	r24, 0x08	; 8
 8b2:	8a b9       	out	0x0a, r24	; 10
	
	/*configure 8-bit data*/
	CLEAR_BIT(UCSRB,UCSZ2);
 8b4:	8a b1       	in	r24, 0x0a	; 10
 8b6:	8b 7f       	andi	r24, 0xFB	; 251
 8b8:	8a b9       	out	0x0a, r24	; 10
	
	/*use UCSRC*/
	UCSRC = 0x86;
 8ba:	86 e8       	ldi	r24, 0x86	; 134
 8bc:	80 bd       	out	0x20, r24	; 32
	
	UCSRA = 0x00;
 8be:	1b b8       	out	0x0b, r1	; 11
 8c0:	08 95       	ret

000008c2 <UART_receive>:
	
}

void UART_receive(uint8* value)
{
	while(!GET_BIT(UCSRA,RXC)){}
 8c2:	5f 9b       	sbis	0x0b, 7	; 11
 8c4:	fe cf       	rjmp	.-4      	; 0x8c2 <UART_receive>
	*value = UDR;
 8c6:	2c b1       	in	r18, 0x0c	; 12
 8c8:	fc 01       	movw	r30, r24
 8ca:	20 83       	st	Z, r18
	SET_BIT(UCSRA,RXC);
 8cc:	8b b1       	in	r24, 0x0b	; 11
 8ce:	80 68       	ori	r24, 0x80	; 128
 8d0:	8b b9       	out	0x0b, r24	; 11
 8d2:	08 95       	ret

000008d4 <UART_transmit>:
}

void UART_transmit(uint8 value)
{
	while(!GET_BIT(UCSRA,UDRE)){}
 8d4:	5d 9b       	sbis	0x0b, 5	; 11
 8d6:	fe cf       	rjmp	.-4      	; 0x8d4 <UART_transmit>
	UDR = value;
 8d8:	8c b9       	out	0x0c, r24	; 12
	SET_BIT(UCSRA,UDRE);
 8da:	8b b1       	in	r24, 0x0b	; 11
 8dc:	80 62       	ori	r24, 0x20	; 32
 8de:	8b b9       	out	0x0b, r24	; 11
 8e0:	08 95       	ret

000008e2 <__umulhisi3>:
 8e2:	a2 9f       	mul	r26, r18
 8e4:	b0 01       	movw	r22, r0
 8e6:	b3 9f       	mul	r27, r19
 8e8:	c0 01       	movw	r24, r0
 8ea:	a3 9f       	mul	r26, r19
 8ec:	70 0d       	add	r23, r0
 8ee:	81 1d       	adc	r24, r1
 8f0:	11 24       	eor	r1, r1
 8f2:	91 1d       	adc	r25, r1
 8f4:	b2 9f       	mul	r27, r18
 8f6:	70 0d       	add	r23, r0
 8f8:	81 1d       	adc	r24, r1
 8fa:	11 24       	eor	r1, r1
 8fc:	91 1d       	adc	r25, r1
 8fe:	08 95       	ret

00000900 <itoa>:
 900:	45 32       	cpi	r20, 0x25	; 37
 902:	51 05       	cpc	r21, r1
 904:	20 f4       	brcc	.+8      	; 0x90e <itoa+0xe>
 906:	42 30       	cpi	r20, 0x02	; 2
 908:	10 f0       	brcs	.+4      	; 0x90e <itoa+0xe>
 90a:	0c 94 8b 04 	jmp	0x916	; 0x916 <__itoa_ncheck>
 90e:	fb 01       	movw	r30, r22
 910:	10 82       	st	Z, r1
 912:	cb 01       	movw	r24, r22
 914:	08 95       	ret

00000916 <__itoa_ncheck>:
 916:	bb 27       	eor	r27, r27
 918:	4a 30       	cpi	r20, 0x0A	; 10
 91a:	31 f4       	brne	.+12     	; 0x928 <__itoa_ncheck+0x12>
 91c:	99 23       	and	r25, r25
 91e:	22 f4       	brpl	.+8      	; 0x928 <__itoa_ncheck+0x12>
 920:	bd e2       	ldi	r27, 0x2D	; 45
 922:	90 95       	com	r25
 924:	81 95       	neg	r24
 926:	9f 4f       	sbci	r25, 0xFF	; 255
 928:	0c 94 97 04 	jmp	0x92e	; 0x92e <__utoa_common>

0000092c <__utoa_ncheck>:
 92c:	bb 27       	eor	r27, r27

0000092e <__utoa_common>:
 92e:	fb 01       	movw	r30, r22
 930:	55 27       	eor	r21, r21
 932:	aa 27       	eor	r26, r26
 934:	88 0f       	add	r24, r24
 936:	99 1f       	adc	r25, r25
 938:	aa 1f       	adc	r26, r26
 93a:	a4 17       	cp	r26, r20
 93c:	10 f0       	brcs	.+4      	; 0x942 <__utoa_common+0x14>
 93e:	a4 1b       	sub	r26, r20
 940:	83 95       	inc	r24
 942:	50 51       	subi	r21, 0x10	; 16
 944:	b9 f7       	brne	.-18     	; 0x934 <__utoa_common+0x6>
 946:	a0 5d       	subi	r26, 0xD0	; 208
 948:	aa 33       	cpi	r26, 0x3A	; 58
 94a:	08 f0       	brcs	.+2      	; 0x94e <__utoa_common+0x20>
 94c:	a9 5d       	subi	r26, 0xD9	; 217
 94e:	a1 93       	st	Z+, r26
 950:	00 97       	sbiw	r24, 0x00	; 0
 952:	79 f7       	brne	.-34     	; 0x932 <__utoa_common+0x4>
 954:	b1 11       	cpse	r27, r1
 956:	b1 93       	st	Z+, r27
 958:	11 92       	st	Z+, r1
 95a:	cb 01       	movw	r24, r22
 95c:	0c 94 b0 04 	jmp	0x960	; 0x960 <strrev>

00000960 <strrev>:
 960:	dc 01       	movw	r26, r24
 962:	fc 01       	movw	r30, r24
 964:	67 2f       	mov	r22, r23
 966:	71 91       	ld	r23, Z+
 968:	77 23       	and	r23, r23
 96a:	e1 f7       	brne	.-8      	; 0x964 <strrev+0x4>
 96c:	32 97       	sbiw	r30, 0x02	; 2
 96e:	04 c0       	rjmp	.+8      	; 0x978 <strrev+0x18>
 970:	7c 91       	ld	r23, X
 972:	6d 93       	st	X+, r22
 974:	70 83       	st	Z, r23
 976:	62 91       	ld	r22, -Z
 978:	ae 17       	cp	r26, r30
 97a:	bf 07       	cpc	r27, r31
 97c:	c8 f3       	brcs	.-14     	; 0x970 <strrev+0x10>
 97e:	08 95       	ret

00000980 <_exit>:
 980:	f8 94       	cli

00000982 <__stop_program>:
 982:	ff cf       	rjmp	.-2      	; 0x982 <__stop_program>
